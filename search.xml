<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>安达与岛村第五卷名场面</title>
      <link href="/adashima5-adachi.html"/>
      <url>/adashima5-adachi.html</url>
      
        <content type="html"><![CDATA[<h1 id="谁再说不知道名场面是啥我就把这呼ta脸上"><a href="#谁再说不知道名场面是啥我就把这呼ta脸上" class="headerlink" title="谁再说不知道名场面是啥我就把这呼ta脸上 :-)"></a><code>谁再说不知道名场面是啥我就把这呼ta脸上 :-)</code></h1><p>『等一下，安達──』</p><p>「我！討厭島村在我不知道的地方露出笑容！也討厭妳跟其他人牽手！我希望妳只牽我的手！只待在我身旁！祭典也是，我也很想去啊！我希望島村很開心的時候，笑的時候，我可以在妳身邊！我想要那樣！我頭好痛，好痛苦！我一直在想島村的事情，感覺都要……發瘋了……我也在等妳打電話給我！妳偶爾也主動開口嘛，主動跟我說話嘛，我不想要總是我單方面找妳，妳多少也……妳一點也不在意我嗎？一點也不會嗎？完全不會？我對妳來說不重要嗎？只是朋友嗎？普通的朋友嗎？我希望自己不是普通的朋友，就算比普通好一點也好，我想成為不普通的……朋友……噯，島村，我該怎麼做才好？噯。島村，妳有在聽嗎？求妳聽我說話。妳聽到我的聲音有什麼想法嗎？會有嗎？妳要說會感到放心，還是什麼都好，拜託有點想法。我希望妳可以有點想法，還是說我不該期待這種事？島村！我就是要島村啊，我啊，就是想要跟島村待在一起。我不需要島村以外的人，不需要……只要有島村就好。我沒有很任性喔，我只說比普通好一點，好一點而已啊。其他人根本就不重要，也不需要，我希望那些人都可以滾遠一點，可是妳為什麼要去他們那邊呢？求妳來我這邊，來我這邊，待在我身邊，不要離開我。不行，在島村身旁的只能是我，我希望是我，我想待在妳身邊，拜託妳讓我待在妳身邊……那個女生是誰？我不認識她啊。我不想看到妳變成我不認識的島村，我想了解島村的一切，也討厭有我不想知道的事情存在，可是我更討厭自己不知道，會更難受。會很難受，很痛苦，很痛苦……島村……我想問妳要不要一起出去玩，也想去祭典啊，我很想去啊，可是島村為什麼會跟那個女生一起去？為什麼跟她一起出去玩？島村妳現在在哪裡？有跟誰在一起嗎？島村，島村……噯，妳有在聽嗎？從剛才開始就只有我在說話啊。平常的島村都會和我說更多話吧？噯，為什麼？現在不像平常一樣嗎？我很奇怪嗎？我很奇怪吧？這我自己也知道，可是，我想知道，我想知道島村的一切，變得好奇怪。我不想和島村分開，我想一直和妳在一起，不管人在哪裡都好，只要是跟妳一起，不管待在哪裡我都無所謂，我好一陣子沒有跟島村見面了啊，我好想見妳，可是感覺我現在見到妳會哭，而且現在也真的在哭，我一直很在意很在意那個女生到底是怎樣，噯，妳有在聽嗎？比起跟我在一起，妳比較喜歡跟她在一起嗎？我不好嗎？哪裡不好了？我會改過的，拜託妳告訴我，我會改過，我絕對會改過，所以拜託妳告訴我，我想知道理由啊。島村妳……我有因為是島村……因為是島村才喜歡的事情，就算有其他人長得跟島村一樣也不影響，雖然也不可能有人跟島村長得一樣，噯，我不是在意島村的外表，一定要是妳才行啊。所以我才想跟妳變得更要好，卻好像……我不是想講這個，我想講其他的事情，可是我很在意……因為島村當時臉上帶著笑容啊。我討厭妳對我以外的人笑。妳不討厭嗎？不會嗎？島村不會這樣嗎？島村妳喜歡誰？妳有喜歡的人嗎？妳會喜歡上一個人嗎？妳知道什麼是喜歡嗎？我有時候啊，覺得好害怕。在想島村為什麼願意陪著我。說起來，我跟島村是朋友吧？至少有變成朋友吧？妳覺得我是朋友嗎？島村對這種事……嗚嗚嗚……噎……島村，讓我聽聽妳的聲音。我想聽妳的聲音，聽妳講講跟我有關的事情。我希望島村是最了解我……最了解我的人。我想了解妳，也希望妳了解我，我希望妳變成最了解我的人，我也想變成最了解妳的人。我很想……可是……感覺只要發生一點不好的事情，我就會很挫折……因為島村……感覺……不像很重視我的樣子……重視……說重視也很奇怪，但是我希望妳可以重視我。我就是想要妳重視我！我不想跟其他人一起被歸在同一類，真的只要……特別一點點就好……島村有思考過關於我的事情嗎？我們暑假一直沒有見面，妳有想起我一次嗎？我啊，我一直想著妳。我一直只想著妳啊。我想的全是跟島村有關的事情。所以，島村！妳有沒有常常想著我……島村跟我不一樣啊，不一樣吧？這我知道，可是！我會期待，也會不小心期待起來，就算像現在這樣被背……叛……我也想打電話給妳。但就算打了電話，也會變成現在這樣，不會解決任何問題，我該怎麼辦才好？噯，島村，島村？電話還沒掛斷吧？我現在還跟妳通著電話吧？可是好遙遠，妳在好遙遠的地方，我好想見妳。我想直接和島村見上一面。我希望妳對我笑，希望妳摸著我的頭，問我有沒有怎麼樣。妳現在在哪裡？在哪裡？有和誰在一起嗎？跟那個女生在一起嗎？那個女生是誰？我從剛才就問過好幾次了吧？是不能告訴我身分的人嗎？妳們是什麼關係？跟她的交情比我好嗎？不要，我不要那樣，我不要妳跟她的交情比我好。不要……妳快說不是那樣，跟我說不是那樣！我滿腦子想著島村啊！還不夠嗎？這樣還不行嗎？要更常想著妳才行嗎？我該怎麼做？我不知道該怎麼做，每次思考該怎麼做也總是落得失敗的下場，告訴我妳希望我怎麼做，妳告訴我的話，我會努力去做的。我絕對會努力去做的，所以，那種人我其實一點也不在乎她怎麼樣。我想見的島村……是更不一樣的，我知道只要改變我自己就好……島村，噯，島村，妳現在在想什麼？妳覺得我很奇怪嗎？覺得我有病嗎？說說妳的想法好嗎？妳主動跟我說話，主動接近我好嗎？每次都是我……都是我……都是我……單方面地接近一個人，就會變成現在這樣啊！就是因為會變成現在這樣，所以島村也……來我這邊好嗎？島村討厭我嗎？不討厭吧？不要，妳不要討厭我。我不要妳討厭我。我不想要妳討厭我……我希望妳喜歡……我希望妳喜歡我。我希望妳喜歡上一個人。不對，是島村妳要喜歡……妳討厭我嗎？妳跟我媽媽一樣討厭我嗎？妳以後不再跟我說話了嗎？會把我當作不認識的人嗎？我該怎麼說才好？我該做什麼才好？要飛起來嗎？要跳起來嗎？要牽妳的手嗎？這些我都想做，可是真的做了妳又不會看著我……我到底該怎麼做才好？我該怎麼做？沒有人……島村，我……好想聽妳的聲音……求妳說點什麼，讓我放心，可是我不要妳對別人笑，只對我笑，對我笑……頭好痛，肚子也……好痛……明明就很在意，可是妳……為什麼不跟我聯絡呢？告訴我，我好想知道。我好想了解島村，我從剛才開始，就覺得心裡好混亂……我一直在說一樣的話，可是這也沒辦法啊，就是沒辦法啊。我就是只想著島村啊……就是只想著島村，所以就算變得一直在想島村……我也很重視島村，很想好好珍惜妳，我不要自己不重視妳，所以……拜託妳看著我。我不要島村不看著我……我不要妳……看著別人……我不要那樣。妳又要跟她一起出去嗎？要跟她去哪裡嗎？一起到市區那裡嗎？跟那個女生一起……到曾經跟我一起去玩的地方嗎！我不要妳那樣。不要蓋掉我跟妳的回憶啊！我一直記得那些回憶，妳卻要忘記……妳又跟她出去玩的話，這次會不一樣嗎？會在看著同樣的地方的時候，看到不一樣的東西嗎？我不要妳那樣，我不要，我不要。我想待在島村身邊，和妳一起分享，相互了解……這樣太奇怪了啊。不對吧？是我很奇怪，我知道自己這樣很奇怪，可是就是會變得很奇怪……我沒辦法不想著島村……就算是現在，也……島村，島村，島……村……嗚嗚……嗚……嗚嗚嗚嗚，島村，島村……唔，咳……嗚嗚……島村的……島村？島村，島村，島村……我就是要島村，我……就是要待在島村身邊，所以島村也……噯，求求妳，島村……島村也……島村……」</p><p>我無法停下來。要不是流下的眼淚自然流進嘴裡，我可能會永無止盡地講下去。在坡道上跌倒，就停不下來了。就算島村在上面等我，我也回不去。</p><p>我聽到腦袋裡某處傳來「妳這是無理取鬧」的勸告聲。</p><p>我知道，我知道自己只是在嫉妒。</p><p>對，我就是在嫉妒。我在吃醋。</p><p>我沒道理對島村發脾氣，但是，那樣一來我又該把這種情緒發洩在哪裡？</p><p>我陷入無法穩定下來的混亂當中，開始啜泣。</p><p>因為……因為因為……因為──</p><p>『…………………………………………唉。』</p><p>我聽到一聲嘆息。</p><p>一種聽起來會默默把臉剖成兩半的深沉嘆息。</p><p>接著──</p><p>『……真難搞耶……』</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安达与岛村 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Visual Studio Code 的 Remote SSH 应用 GPG Agent</title>
      <link href="/vscode-ssh-gpg-agent.html"/>
      <url>/vscode-ssh-gpg-agent.html</url>
      
        <content type="html"><![CDATA[<p>此内容理论上同时支持Linux/Mac。</p><ul><li>把 GPG 相关的内容安装清楚，最好确保已经能在终端使用 GPG 登录 SSH</li><li>将 <code>enable-ssh-support</code> 加入 <code>~/.ssh/gpg-agent.conf</code> 中</li><li>创建 <code>ssh-gpg</code> 文件，赋予可执行权限，内容如下：</li></ul><pre><code class="shell">#!/bin/shexport GPG_TTY=$TTYunset SSH_AGENT_PIDif [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then  export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"figpgconf --launch gpg-agentssh $*</code></pre><ul><li>修改 VSCode 设置，将<code>remote.SSH.path</code>设置为<code>ssh-gpg</code>所在的路径。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Visual Studio Code </tag>
            
            <tag> GPG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MolMoe Network 组网记录</title>
      <link href="/molmoe-build.html"/>
      <url>/molmoe-build.html</url>
      
        <content type="html"><![CDATA[<h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>听说 DN42 之后感觉还挺有意思的，就趁着寒假捣鼓了一把，顺便修改了网络结构，通过 ZeroTier 把家里、宿舍、实验室等的网络组合在一起了，并且使用 iBGP 自动路由。学到不少计算机网络知识，受益匪浅。</p><p><a href="https://dn42.mol.moe/">点此和 Molmoe Network 一起贴贴</a></p><p>感谢 Lan Tian 的博客指引方向：<a href="http://lantian.pub/article/modify-website/dn42-experimental-network-2020.lantian/">Clearnet</a> <a href="http://lantian.dn42/article/modify-website/dn42-experimental-network-2020.lantian/">DN42</a></p><p><a href="https://t.me/Dn42Chat">非官方 DN42 Telegram 群组</a></p><h2 id="申请-DN42-ASN-和-IP"><a href="#申请-DN42-ASN-和-IP" class="headerlink" title="申请 DN42 ASN 和 IP"></a>申请 DN42 ASN 和 IP</h2><p>DN42 使用 OpenPGP 密钥或 SSH密钥验证身份，因此您需要准备好 OpenPGP 或 SSH 密钥，并将其上传至 DN42 的 Gitea 实例，以便后续身份验证。</p><p>首先自然是要注册一个 DN42 地址了。访问<a href="https://git.dn42.dev/">DN42 Git</a>，注册一个帐号，名称随意，但是后面最好不再更改。</p><p>下一步是将 <a href="https://git.dn42.dev/dn42/registry">dn42/registry</a> clone 到本地，然后在本地新建一个名称为 <code>你的用户名-今天日期/操作名称</code>（例如： <code>mol-20220510/register</code>）的分支并上传：</p><pre><code class="shell">git clone https://git.dn42.dev/dn42/registrygit checkout -b mol-20220510git push --set-upstream origin mol-20220510/register</code></pre><p>然后就是填写网络信息了。在 Clone 下来的仓库中新建一系列文件，文件模板可以参照同目录其他参与者，所有项名称、冒号和空格加起来均为20字符，所有文件名均为大写，建议全部使用 OpenPGP 密钥：</p><ul><li><code>data/mntner/[Maintainer 名称]</code> 帐户信息文件</li></ul><pre><code>mntner:             [Maintainer 名称]admin-c:            [Administrator 名称]tech-c:             [Administrator 名称]mnt-by:             [Maintainer 名称]source:             DN42auth:               pgp-fingerprint [OpenPGP 指纹（如果有的话）]auth:               ssh-xxx [SSH 公钥（如果有的话）]remarks:            [注释，可以不填]</code></pre><ul><li><code>data/person/[Administrator 名称]</code> 个人信息文件</li></ul><pre><code>person:             [姓名或其他名称]e-mail:             [邮箱]contact:            [其它联系方式]nic-hdl:            [Administrator 名称]mnt-by:             [Maintainer 名称]source:             DN42</code></pre><ul><li><code>data/aut-num/[ASN 号码]</code> ASN信息文件</li></ul><p>如果有自己的公网ASN的话可以使用，像我这种穷人只能拿一个DN42私有ASN了，比如我的是AS4242420603。</p><pre><code>aut-num:            [ASN 号码]as-name:            [AS 名称]descr:              [注释]admin-c:            [Administrator 名称]tech-c:             [Administrator 名称]mnt-by:             [Maintainer 名称]source:             DN42</code></pre><ul><li><code>data/inetnum/[IPv4 地址]</code> IPv4信息文件</li></ul><p>DN42内一般申请/27的地址块就够用，/26是无需询问用途的最大地址块。我的地址为<code>172.23.7.64/26</code>，那么文件名为<code>172.23.7.64_26</code>。蓝天佬提到部分隧道引起的IP占用问题，因为DN42内主要使用WireGuard建立隧道，一般无需担心此问题。有一些地址被保留用作特殊用途，如<code>172.20.0.0/24</code>被保留用于Anycast，只能申请<code>/32</code>地址块。</p><pre><code>inetnum:            [起始IP] - [终止IP]netname:            [网络名称]remarks:            [注释]descr:              [注释]country:            [地区代码，看得懂这篇文章的一般是CN/HK/MO/TW/SG]admin-c:            [Administrator 名称]tech-c:             [Administrator 名称]mnt-by:             [Maintainer 名称]nserver:            [反向解析服务器]nserver:            [反向解析服务器]status:             ASSIGNEDcidr:               [IP地址段CIDR]source:             DN42</code></pre><ul><li><code>data/route/[IPv4 地址]</code> IPv4路由信息</li></ul><pre><code>route:              [IP地址段CIDR]descr:              [注释]origin:             [ASN 号码]mnt-by:             [Maintainer 名称]source:             DN42</code></pre><ul><li><code>data/inet6num/[IPv6 地址]</code> IPv6信息文件</li></ul><p>DN42内一般申请/48的地址块，足够任何人使用。</p><pre><code>inetnum:            [起始IP] - [终止IP]netname:            [网络名称]remarks:            [注释]descr:              [注释]country:            [地区代码，看得懂这篇文章的一般是CN/HK/MO/TW/SG]admin-c:            [Administrator 名称]tech-c:             [Administrator 名称]mnt-by:             [Maintainer 名称]nserver:            [反向解析服务器]nserver:            [反向解析服务器]status:             ASSIGNEDcidr:               [IP地址段CIDR]source:             DN42</code></pre><ul><li><code>data/route/[IPv6 地址]</code> IPv6路由信息</li></ul><pre><code>route:              [IP地址段CIDR]descr:              [注释]origin:             [ASN 号码]mnt-by:             [Maintainer 名称]source:             DN42</code></pre><p>到此为止已完成所有信息的添加，创建一份带有签名的 Commit 并提交：</p><pre><code class="shell">git commit -S -m "提交信息"git push</code></pre><p>由于DN42 Git一次Pull Request只接受一个Commit，如果有Commit后修改内容的需求，请善用<code>--amend</code>参数后，带<code>-f</code>强制提交。</p><p>接下来回到DN42 Git，发起Pull Request等待合并。</p><p>合并成功后，由于ROA信息需要定时更新，您需要等待最长24小时方可进行Peer。DN42 官方提供的 ROA 更新时间是15分钟一次。</p><h2 id="年轻人第一次-Peer"><a href="#年轻人第一次-Peer" class="headerlink" title="年轻人第一次 Peer"></a>年轻人第一次 Peer</h2><p>DN42 的目标是模拟一个真实的互联网，因此您通常要联系IX或其它设施来提供BGP接入。不过既然是DN42就不需要交钱给Cogent或是HE这样的组织，只要联系已经加入DN42的参与者，通过和ta们Peer以获得DN42路由能力。</p><p>以下是几种寻找 Peer 的方法：</p><ul><li><a href="https://dn42.mol.moe/">使用 MolMoe Network 的 Autopeer Bot 和 MolMoe 进行全自动 Peer</a> <a href="https://github.com/insorasky/dn42peerbot">AutoPeer Bot 源代码</a></li><li><a href="https://wiki.dn42.us/services/Automatic-Peering">和已知有 Autopeer 服务的用户 Peer</a></li><li><a href="https://wiki.dn42.us/services/Automatic-Peering">使用 PingFinder 搜寻最近的 Peer</a></li><li><a href="https://t.me/Dn42Chat">去非官方 DN42 群组找人 Peer</a></li></ul><p>您可以找多个用户一起Peer，避免单线断开引起失联。</p><h3 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h3><p>在开始配置之前，您需要做好以下准备工作：</p><ul><li>安装Linux；</li><li>关闭您节点上的任何傻瓜防火墙设施，例如<code>UFW</code>；</li><li>安装 WireGuard 和 Bird2，并确保已有 <code>wg-quick</code> 快速配置工具。新手建议使用这对隧道和BGP程序，老鸟随意。</li></ul><p>启用 Linux 的内核数据包转发功能，禁用 <code>rp_filter</code> 严格模式：</p><pre><code class="shell">echo "net.ipv4.ip_forward=1" &gt;&gt; /etc/sysctl.confecho "net.ipv6.conf.default.forwarding=1" &gt;&gt; /etc/sysctl.confecho "net.ipv6.conf.all.forwarding=1" &gt;&gt; /etc/sysctl.confecho "net.ipv4.conf.default.rp_filter=0" &gt;&gt; /etc/sysctl.confecho "net.ipv4.conf.all.rp_filter=0" &gt;&gt; /etc/sysctl.confsysctl -p</code></pre><h3 id="配置-Bird"><a href="#配置-Bird" class="headerlink" title="配置 Bird"></a>配置 Bird</h3><p>根据经验，您应该先建立和外界的Peer再打扫内部的网络，便于调试，少走弯路。PingFinder 和群里的 Ping Bot 可以帮助您调试网络。</p><p>如果您的发行版的 <code>bird.conf</code> 位于 <code>/etc/bird/</code> 就再好不过了；如果不是的话，建议创建这个目录，并将<code>/etc/bird.conf</code>软链过去：</p><pre><code class="shell">mkdir /etc/birdmv /etc/bird.conf /etc/bird/bird.confln -s /etc/bird.conf /etc/bird/bird.confmkdir /etc/bird/peers</code></pre><p>根据 <a href="https://wiki.dn42.us/howto/Bird2">DN42 Wiki</a> 配置Bird，将 <code>/etc/bird/bird.conf</code> 中的内容替换为DN42 Wiki提供的内容即可。文件较长，详细请参考Wiki。</p><p>上文提到了ROA，ROA限制了来源路由，避免了公网中BGP配置错误造成整个网络爆炸的窘境。<del>（虽然DN42也不是没有发生过）</del></p><p>输入 <code>crontab -e</code>，使用 cron 每15分钟更新一次ROA信息（如果习惯使用其它定时程序可随意；可能需要<code>systemctl enable cronie</code>）：</p><pre><code>*/15 * * * * curl -sfSLR -o /etc/bird/roa_dn42.conf https://dn42.burble.com/roa/dn42_roa_bird2_4.conf &amp;&amp; curl -sfSLR -o /etc/bird/roa_dn42_v6.conf https://dn42.burble.com/roa/dn42_roa_bird2_6.conf &amp;&amp; /usr/sbin/birdc configure 1&gt; /dev/null</code></pre><p>上述命令每15分钟执行一次，下载ROA信息到<code>/etc/bird/dn42_roa_bird2_4.conf</code>和<code>/etc/bird/dn42_roa_bird2_6.conf</code>。</p><p>运行一次<code>birdc configure</code>，确认配置正确，然后就可以愉快地Peer了！</p><h3 id="添加-Peer-信息，建立隧道和BGP"><a href="#添加-Peer-信息，建立隧道和BGP" class="headerlink" title="添加 Peer 信息，建立隧道和BGP"></a>添加 Peer 信息，建立隧道和BGP</h3><p>以下是文件模板：</p><ul><li><code>/etc/wireguard/[给我的隧道起个名字吧].conf</code></li></ul><pre><code class="ini">[Interface]PrivateKey = [您的私钥]ListenPort = [您的隧道监听端口]Table = offPostUp = ip addr add fe80::603/64 dev %iPostUp = ip addr add [您的DN42 IPv6地址]/128 dev %iPostUp = ip addr add [我的DN42 IPv4地址] peer [您的DN42 IPv4地址] dev %iPostUp = sysctl -w net.ipv6.conf.%i.autoconf=0[Peer]PublicKey = [我的公钥]Endpoint = [我的endpoint]:[您从bot获得的endpoint端口号]AllowedIPs = 10.0.0.0/8, 172.20.0.0/14, 172.31.0.0/16, fd00::/8, fe80::/64</code></pre><ul><li><code>/etc/bird/peers/[给我的BGP Peer起个名字吧].conf（启用Multiprotocol）</code></li></ul><pre><code class="ini">protocol bgp [BGP Peer名称] from dnpeers {    neighbor fe80::603 % '[隧道名]' as 4242420603;    direct;};</code></pre><ul><li><code>/etc/bird/peers/[给我的BGP Peer起个名字吧].conf（未启用Multiprotocol）</code></li></ul><pre><code>protocol bgp [BGP Peer名称]_v4 from dnpeers {    neighbor [我的DN42 IPv4地址] as 4242420603;    direct;    ipv6 {        import none;        export none;    };};protocol bgp [BGP Peer名称]_v6 from dnpeers {    neighbor fe80::603 % '[隧道名]' as 4242420603;    direct;    ipv4 {        import none;        export none;    };};</code></pre><p>添加完文件后，执行以下命令启用隧道和配置Bird：</p><pre><code class="shell">cd /etc/wireguardwg-quick up [隧道名]birdc configure</code></pre><p>使用以下命令检查隧道和BGP是否配置成功：</p><pre><code class="shell">wg showbirdc s p</code></pre><p>若 WireGuard 有双向数据传输、Bird BGP显示<code>Established</code>，则恭喜您有了第一条Peer！</p><h2 id="打理内网"><a href="#打理内网" class="headerlink" title="打理内网"></a>打理内网</h2><p>「未完待续」</p>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DN42 </tag>
            
            <tag> Molmoe </tag>
            
            <tag> 网络技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于迁移到Hexo</title>
      <link href="/hello-hexo.html"/>
      <url>/hello-hexo.html</url>
      
        <content type="html"><![CDATA[<h1 id="为什么要迁移博客"><a href="#为什么要迁移博客" class="headerlink" title="为什么要迁移博客"></a>为什么要迁移博客</h1><p>我校每个寒暑假均会将宿舍断电，因此这个寒假我的设备被断电，导致包括<code>MolMoe Network</code>在内的一个节点下线，存放在其上的原有使用<code>Typecho</code>搭建的<code>inSoraSky BLOG</code>下线。</p><p>故决意迁移博客至<code>GitHub Pages</code>，以应对可能的故障问题。原有的博客文章将会统一迁移至新博客。</p><h1 id="迁移安排"><a href="#迁移安排" class="headerlink" title="迁移安排"></a>迁移安排</h1><p>新博客地址为<code>https://blog.sorasky.in/</code>，对于原博客相关资源的安排如下：</p><ul><li>原地址将用于存放个人HomePage；</li><li>原博客将继续运行一段时间，但不再更新；</li><li>原有的友情链接将在原博客恢复访问后迁移过来。</li></ul><p>感谢大家对本博客的厚爱，新的2022年，大家一同前行。</p>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修复Ubuntu20.04摄像头不识别问题</title>
      <link href="/ubuntu2004-webcam.html"/>
      <url>/ubuntu2004-webcam.html</url>
      
        <content type="html"><![CDATA[<p><code>lsusb</code>和<code>sudo lshw</code>可看到摄像头。<br>修复摄像头设备权限即可。老Ubuntu了。</p><ul><li>1.<code>ls -l /dev/video*</code>查看权限如下：<pre><code>crw-rw----+ 1 root video 81, 0 11月 12 23:35 /dev/video0crw-rw----+ 1 root video 81, 1 11月 12 23:35 /dev/video1</code></pre></li><li>2.执行<code>sudo chown root:video /dev/video*</code></li><li>3.执行<code>sudo chmod 666 /dev/video*</code></li><li>4.打开浏览器测试，可以识别了。修复后权限如下：<pre><code>crw-rw-rw-+ 1 root video 81, 0 11月 12 23:35 /dev/video0crw-rw-rw-+ 1 root video 81, 1 11月 12 23:35 /dev/video1</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 摄像头 </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>USTC Hackergame 2021 Writeup</title>
      <link href="/hg2021.html"/>
      <url>/hg2021.html</url>
      
        <content type="html"><![CDATA[<p>今年是本菜鸡第一次参加CTF，本人学的不是信息安全专业，因此对大多数CTF没什么兴趣。<br>参加本次<a href="http://hack.lug.ustc.edu.cn/">Hackergame</a>是因为经常水<a href="http://lug.ustc.edu.cn/">USTCLUG</a>的群，挺喜欢USTCLUG的氛围，所以来随便<del>卷一卷</del>（不是<br><img src="/images/3117883759.png"><br><del>我记得我最高的时候是84名，深深地体会到了卷王的厉害</del><br>对于我这种信息安全外行来说，这个成绩可能还算不错的样子，就是有一道题差点做出来<del>没错就差最后一步了</del>，如果我做出来的话，完全可以上榜单的……没事，反正第一次不熟练是正常的，反正分数和第100名是一样的，不用后悔，明年再战<br>不用后悔对吧<br>不用后悔的<br>……<br><strong><del>呜啊哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇哇</del></strong></p><h1 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h1><p>签到题没什么好说的，Unix时间戳贴到URL里rua一把就完事了。</p><h1 id="进制十六——参上"><a href="#进制十六——参上" class="headerlink" title="进制十六——参上"></a>进制十六——参上</h1><p>遮了明文却没遮住16进制部分，用WinHex(Windows)或者UltraEdit(Windows/macOS)<del>甚至Python/JavaScript</del>输入相应的16进制部分即得到结果。<br><img src="/images/3592711830.png"></p><h1 id="去吧！追寻自由的电波"><a href="#去吧！追寻自由的电波" class="headerlink" title="去吧！追寻自由的电波"></a>去吧！追寻自由的电波</h1><p>无线电是吧，Google“无线电 区分字符串中读音相近的字母”找到单词表。<br><img src="/images/1960420648.png"><br>当时这道题难了我好久，用macOS IINA降速失真严重，用Firefox降速总有听不清的单词，最后忍着安装用不到的软件的悲痛上了上次用还是高一时的Adobe Audition，降速+降调<br>这次算是清晰了，不过第5个单词和最后一个单词听了半天，怀疑这个词真的在单词表里面吗？<br>干脆掏出Google翻译语音识别这个单词——还真TM不在单词表里面@(huaji_han)<br><img src="/images/1502879478.jpg"><br><del>对不起，是我英语太烂了</del></p><h1 id="猫咪问答-Pro-Max"><a href="#猫咪问答-Pro-Max" class="headerlink" title="猫咪问答 Pro Max"></a>猫咪问答 Pro Max</h1><p><del>紧跟时事是吧</del><br><del>不知道你们这个猫咪问答炼丹性能能不能和M1 Max有得一拼</del></p><blockquote><ol><li>2017 年，中科大信息安全俱乐部（SEC@USTC）并入中科大 Linux 用户协会（USTCLUG）。目前，信息安全俱乐部的域名（sec.ustc.edu.cn）已经无法访问，但你能找到信息安全俱乐部的社团章程在哪一天的会员代表大会上通过的吗？</li></ol></blockquote><blockquote><p>提示：输入格式为 YYYYMMDD，如 20211023。请不要回答 “能” 或者 “不能”。</p></blockquote><p><code>sec.ustc.edu.cn</code>已经挂了，搜索<code>site:lug.ustc.edu.cn</code>可以找到LUG官网的存档，但是所有的链接已经被替换为<code>archive.org</code>的链接。<br>点击首页，点击<code>信息安全俱乐部社团章程</code>，找到日期。<br><img src="/images/38018116.png"></p><blockquote><ol start="2"><li>中国科学技术大学 Linux 用户协会在近五年多少次被评为校五星级社团？</li></ol></blockquote><blockquote><p>提示：是一个非负整数。</p></blockquote><p>点击LUG官网——了解更多，找到可能是答案的内容：</p><p><strong>为了表彰其出色表现，协会于 2011 年 5 月被评为中国科学技术大学优秀学生社团，于 2012 年 5 月、2013 年 5 月及 2014 年 5 月分别被评为中国科学技术大学四星级学生社团，并于 2015 年 5 月、2017 年 7 月、2018 年 9 月、2019 年 8 月及 2020 年 9 月被评为中国科学技术大学五星级学生社团。</strong></p><p>今年是2021年，填了4，答案错误。我当时怀疑是后面的答案出了问题，试了好几次，最后随便试了一下5，过了；后来我听说USTCLUG在2021年也被评选为五星社团了。</p><blockquote><ol start="3"><li>中国科学技术大学 Linux 用户协会位于西区图书馆的活动室门口的牌子上“LUG @ USTC”下方的小字是？</li></ol></blockquote><blockquote><p>提示：正确答案的长度为 27，注意大小写。</p></blockquote><p>考不上科大的菜逼当然是找图了。Google一下USTCLUG找到图：<br><img src="/images/2784090736.png"><br><img src="/images/1457713995.png"></p><blockquote><ol start="4"><li>在 SIGBOVIK 2021 的一篇关于二进制 Newcomb-Benford 定律的论文中，作者一共展示了多少个数据集对其理论结果进行验证？</li></ol></blockquote><blockquote><p>提示：是一个非负整数。</p></blockquote><p>Google搜索<code>Newcomb-Benford SIGBOVIK 2021</code>找到<a href="http://sigbovik.org/2021/proceedings.pdf">论文合集</a>，搜索<code>Newcomb-Benford</code>找到相应的论文。<br><img src="/images/943225485.png"><br>可见共有14个图表，第一个图表为作者引用之前的结果，并非用于对其理论结果进行验证，故为13。</p><blockquote><ol start="5"><li>不严格遵循协议规范的操作着实令人生厌，好在 IETF 于 2021 年成立了 Protocol Police 以监督并惩戒所有违背 RFC 文档的行为个体。假如你发现了某位同学可能违反了协议规范，根据 Protocol Police 相关文档中规定的举报方法，你应该将你的举报信发往何处？</li></ol></blockquote><blockquote><p>提示：正确答案的长度为 9。</p></blockquote><p>Google一下<code>Protocol Police</code>找到<a href="https://www.rfc-editor.org/rfc/rfc8962.html"><code>RFC 8962 Establishing the Protocol Police</code></a>，阅读后找到答案：</p><blockquote><ol start="6"><li>Reporting Offenses<br>Send all your reports of possible violations and all tips about wrongdoing to /dev/null. The Protocol Police are listening and will take care of it.</li></ol></blockquote><h1 id="卖瓜"><a href="#卖瓜" class="headerlink" title="卖瓜"></a>卖瓜</h1><blockquote><p>有一个人前来买瓜。你拥有以下物品：</p></blockquote><blockquote><p>一个大棚，里面有许多 6 斤一个的瓜和许多 9 斤一个的瓜。 </p></blockquote><blockquote><p>一个电子秤（最开始是空的）；</p></blockquote><blockquote><p>你的任务是在电子秤上称出刚好 20 斤的瓜。</p></blockquote><p>正常肯定是不行的，尝试输个n个9成功使其溢出：<br><img src="/images/2495541489.png"><br>先给它加到比较小的数：<br><img src="/images/2346648780.png"><br>然后随便排列组合一下，给它加到20：<br><img src="/images/2843674806.png"></p><h1 id="透明的文件"><a href="#透明的文件" class="headerlink" title="透明的文件"></a>透明的文件</h1><blockquote><p>一个透明的文件，用于在终端中展示一个五颜六色的 flag。 可能是在 cmd.exe</p></blockquote><blockquote><p>等劣质终端中被长期使用的原因，这个文件失去了一些重要成分，变成了一堆乱码，也不会再显示出 flag 了。</p></blockquote><blockquote><p>注意：flag内部的字符全部为小写字母。</p></blockquote><p>这个转义总感觉很眼熟，Google搜索<code>[39m 转义</code>知道此乃<code>ANSI转义序列</code>，文件里的一堆空格是它输出的字符。说了cmd不能识别这种转义，反正我用的macOS（不是Mac），不慌。<br>将<code>[</code>替换为<code>\033[</code>，因为空格看不清所以替换为方块<code>█</code>，输出即可。<br>记得最后暂停一下，否则会被清除。</p><pre><code class="python">file = './transparent-2.txt'with open(file, 'r') as f:    data = f.read()data2 = data.replace('[', '\033[')data2 = data2.replace(' ', '█')print(data2)input()</code></pre><p><img src="/images/476816357.png"></p><h1 id="旅行照片"><a href="#旅行照片" class="headerlink" title="旅行照片"></a>旅行照片</h1><p>和猫咪问答一样，又是社工题。<br>看到KFC，Google一下<code>KFC 海边</code>搜图，找到秦皇岛新澳海底世界KFC。<br><del>海底世界也不搞大点，我问了一个秦皇岛的同学，他说没去过</del><br><del>听说有人打电话给这家KFC了，甚至还有人打给EXIF信息上的电话，结果接电话的是科大保卫处</del><br>知道了具体的KFC就很容易找到电话号码了，至于旁边的几个字稍微翻一翻也可以找到，4、5题搞定。<br>至于前三道选择题，我用我毕生所学的初中地理知识无解，反正是静态资源+base64文件名，暴力解决。</p><pre><code class="python">import requestsimport base64tpl = '1={0}&amp;2={1}&amp;3={2}&amp;4=0335-7168800&amp;5=%E6%B5%B7%E8%B1%9A%E9%A6%86'url = 'http://202.38.93.111:10055/%s.txt'for c1 in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']:    for c2 in ['a', 'b', 'c', 'd', 'e']:        for n in range(8, 18):            data = tpl.format(c1, c2, n)            req = requests.get(url % base64.b64encode(data.encode()).decode())            print('%s %s %s %s' % (c1, c2, n, req.status_code))            if req.status_code != 404:                print(req.text)</code></pre><h1 id="FLAG-助力大红包"><a href="#FLAG-助力大红包" class="headerlink" title="FLAG 助力大红包"></a>FLAG 助力大红包</h1><p>题目要求所有的/8段IP都轮一遍，这按正常方法显然是不行的，就算你在科大校内可以拿到10.0.0.0/8，那无效地址0.0.0.0/8，环回地址127.0.0.0/8，广播地址255.0.0.0/8怎么办对吧<br>于是上<code>X-Forward-For</code>协议头伪造IP地址，成功过关，<del>感谢一年前某网站试图屏蔽我的爬虫让我知道了这个HTTP头</del></p><pre><code class="python">import requestsfor i in range(0, 255):    time.sleep(1)    data = requests.post(        url='http://202.38.93.111:10888/invite/3730fa86-8117-4a49-ae4d-7d52fca5088c',        headers={'Content-Type': 'application/x-www-form-urlencoded', 'X-Forwarded-For': f'{i}.8.8.8'},        data=f'ip={i}.8.8.8'    ).text    print(data)</code></pre><h1 id="Amnesia-轻度失忆"><a href="#Amnesia-轻度失忆" class="headerlink" title="Amnesia 轻度失忆"></a>Amnesia 轻度失忆</h1><p><del>重度失忆不会，没学过汇编</del><br>编译后 ELF 文件的 .data 和 .rodata 段会被清零，那我们不从这里拿字符串不就行了</p><pre><code class="c++">#include &lt;stdio.h&gt;int main(){    putchar('H');    putchar('e');    putchar('l');    putchar('l');    putchar('o');    putchar(',');    putchar(' ');    putchar('W');    putchar('o');    putchar('r');    putchar('l');    putchar('d');    putchar('!');}</code></pre><h1 id="图之上的信息"><a href="#图之上的信息" class="headerlink" title="图之上的信息"></a>图之上的信息</h1><p>GraphQL？我以前还真没有听说过这个技术栈，据说是把接口当数据库用，同时相对于SQL更好进行权限处理。<br>搜索<code>GraphQL 渗透</code>，找到<a href="https://mp.weixin.qq.com/s/gp2jGrLPllsh5xn7vn9BwQ">渗透测试之玩转graphQL</a>，得知GraphQL有内省查询问题。<br>对页面进行抓包，可以看到笔记部分使用graphql作为接口获取数据<br><img src="/images/2489758709.png"><br>构造内省查询包，取得用户表结构：<br><img src="/images/4103678514.png"><br><img src="/images/4077881976.png"><br>可知邮箱位于User表下的privateEmail字段，查询获得flag：<br><img src="/images/2195820482.png"><br><img src="/images/867534780.png"></p><h1 id="加密的U盘"><a href="#加密的U盘" class="headerlink" title="加密的U盘"></a>加密的U盘</h1><p>LUKS的原理是使用masterkey加密内容，之后再使用passphrase加密masterkey，而修改passphrase并不会修改masterkey。将day2.img的header替换为day1.img的header，就可以用day1.img的passphrase解密day2.img。操作环境为Ubuntu 20.04.5 LTS。</p><pre><code class="shell">sudo apt install -y cryptsetup-binsudo losetup -f # 获取空闲loop环回虚拟设备，假设为/dev/loop1sudo losetup -P loop1 ./day1.img # 挂载day1.img到loop1sudo losetup -f # 获取空闲loop环回虚拟设备，假设为/dev/loop2sudo losetup -P loop2 ./day2.img # 挂载day2.img到loop2sudo cryptsetup luksHeaderBackup /dev/loop1p1 --header-backup-file ./header1.bin # 备份day1.img的headersudo cryptsetup luksHeaderRestore /dev/loop2p1 --header-backup-file ./header1.bin # 将header还原到day2.imgsudo cryptsetup open /dev/loop2p1 day2 # 解密挂载day2.img到day2 mapper，需要输入密码# 因为已经恢复为day1的header，输入day1的密码即可mkdir day2 # 建个目录供挂载mount /dev/mapper/day2 ./day2 # 挂载至day2文件夹cat ./day2/flag.txt # 获取flag</code></pre><h1 id="Micro-World"><a href="#Micro-World" class="headerlink" title="Micro World"></a>Micro World</h1><p>** 注意：这里的解法不是完整的解法。** </p><p>没错，我开头说的差点做出来的题就是这一题！明明已经把源码逆向出来了，然而终究还是被出题人预判了……经验不足，明年再……**<del>呜哇啊啊啊啊啊啊啊啊啊啊啊啊啊我的300分啊啊啊有了这300分不就进前80了啊啊啊</del>**<br>本人exe逆向零基础，试图用IDA Pro逆向失败，索性摆烂，掏出<del>超清一亿像素60fps丝滑录像照亮你的美</del>小米10Pro准备录下开头美好的flag。<br>flag没录到<del>开头那特么是个什么玩意</del>，但是当我仔细翻看录像时，发现了新大陆：<br><img src="/images/276395211.jpg"><br>pygame是吧？那八成用的pyinstaller打包，上<a href="https://github.com/extremecoders-re/pyinstxtractor">pyinstxtractor</a>，得到2.pyc，然后网上随便找个pyc反编译，得到python源码。<br>然后欣喜地运行，结果初始画面和手机录到的并没有什么区别，改了配色还是没看出什么玄机<br><img src="/images/3673461867.png"><br>试了半天找不出flag来……<br>根据<a href="https://github.com/USTC-Hackergame/hackergame2021-writeups/blob/master/official/Micro%20World/README.md">官方解法</a>，将vx和vy置相反数可以使粒子反向运动获得flag。~~~我为什么没想到<strong>啊啊啊</strong>我还是太嫩了~~~</p><h1 id="马赛克"><a href="#马赛克" class="headerlink" title="马赛克"></a>马赛克</h1><p>下载生成马赛克的源码，看到马赛克是通过将块内的所有像素取均值得到的。通过最外层露出来的不完整像素可解得马赛克块的部分像素；并且马赛克块内像素的均值已知，接下来不断地去碰撞即可。我的代码没有对可能存在的多种情况进行处理，而是直接加入队尾后跳过；理论上可以通过递归的方式获得完整的二维码，但是反正二维码一般有容错机制，商业二维码扫描库也支持自动纠错，扫得出来就懒得折腾了。最终剩余154个马赛克块未解开，微信扫码获得flag。</p><pre><code class="python">import numpy as npfrom PIL import Imageimport queueX, Y = 103, 137 # 纵向x，横向yN = 20 # 马赛克块数，NxNBOX_SIZE = 23 # 马赛克块边长PIXEL_SIZE = 11 # 二维码像素边长# 打开图片img = Image.open('./pixelated_qrcode.bmp')arr = np.asarray(img)def get_color(x, y):    '''    根据已有颜色判断该方格原有颜色    若为黑色0返回1，白色255返回0，未知返回-1    '''    pixel_x = int(x / PIXEL_SIZE) * PIXEL_SIZE    pixel_y = int(y / PIXEL_SIZE) * PIXEL_SIZE    pixels = arr[pixel_x:pixel_x+PIXEL_SIZE, pixel_y:pixel_y+PIXEL_SIZE]    for _y in pixels:        for color in _y:            if color == 0:                return 1            elif color == 255:                return 0    return -1def divide_by_pixels(x, y) -&gt; tuple[int, int, int, int]:    '''    根据二维码像素切割马赛克块    '''    if x &lt; X or y &lt; Y:        return False    block_x = int((x - X) / BOX_SIZE) * BOX_SIZE + X # 马赛克块位置    block_y = int((y - Y) / BOX_SIZE) * BOX_SIZE + Y    pixel0_x = int(block_x / PIXEL_SIZE) * PIXEL_SIZE # 二维码像素起始位置    pixel0_y = int(block_y / PIXEL_SIZE) * PIXEL_SIZE    pixel1_x = pixel0_x # 二维码像素x向最大位置    while True:        pixel1_x += PIXEL_SIZE        if pixel1_x &gt;= block_x + BOX_SIZE:            break    pixel1_y = pixel0_y # 二维码像素y向最大位置    while True:        pixel1_y+= PIXEL_SIZE        if pixel1_y &gt;= block_y + BOX_SIZE:            break    result = [        ((max(x1, block_x), max(y1, block_y)),        (            min(x1 + PIXEL_SIZE, block_x + BOX_SIZE),            min(y1 + PIXEL_SIZE, block_y + BOX_SIZE))        )        for x1 in map(            lambda x: pixel0_x + PIXEL_SIZE * x,            range(0, int((pixel1_x - pixel0_x) / PIXEL_SIZE))        )        for y1 in map(            lambda y: pixel0_y + PIXEL_SIZE * y,            range(0, int((pixel1_y - pixel0_y) / PIXEL_SIZE))        )    ]    return resultdef gen_possibility(length):    '''    返回所有可能性    '''    return [[int(i) for i in list('{:b}'.format(n).rjust(length, '0'))] for n in range(0, 2 ** length)]def avgs(parts):    '''    计算在所有可能性下的均值    '''    n = len(parts)    poss = gen_possibility(n)    result = []    for s in poss:        all_sum = sum(            [(x2 - x1) * (y2 - y1) * (0 if s[i] else 255)                for i,((x1,y1),(x2,y2)) in enumerate(parts)]        )        avg = all_sum / (BOX_SIZE ** 2)        result.append((s, avg))    return resultdef possibilities(parts, known, target):    '''    获取所有符合条件的可能性    '''    print(known)    all_poss = [poss for poss, avg in avgs(parts) if int(avg) == target]    result = []    for poss in all_poss:        available = True        for n, i in enumerate(known):            if i == -1:                continue            if i != poss[n]:                available = False                break        if available:            result.append(poss)    return resultdef main():    '''    主程序    '''    q = queue.Queue()    for item in [(nx, ny) for nx in range(0, N) for ny in range(0, N)]:        q.put(item)    while True:        if q.qsize() == 0:            break        nx, ny = q.get()        print(f'current: {nx}, {ny}, {q.qsize()}')        if q.qsize() == 154:            Image.fromarray(arr).save('./result.png')            exit(0)        block_x = X + BOX_SIZE * nx        block_y = Y + BOX_SIZE * ny        parts = divide_by_pixels(block_x, block_y)        colors = [get_color(x1, y1) for (x1, y1), _ in parts]        poss = possibilities(parts, colors, arr[block_x, block_y])        if len(poss) != 1:            q.put((nx, ny))            continue        poss = poss[0]        for n, i in enumerate(poss):            (x1, y1), (x2, y2) = parts[n]            if i == 1:                arr[x1:x2, y1:y2] = 0            elif i == 0:                arr[x1:x2, y1:y2] = 255            else:                raise Exception                Image.fromarray(arr).show()                exit(0)    Image.fromarray(arr).show()if __name__ == '__main__':    main()</code></pre><p><img src="/images/4235438444.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><del>这次Hackergame题目印刷清晰，手感舒适；厨房阿姨态度和蔼，瓜非常好吃；flag比pdd好拼，一点也不难；总体来说感觉很不错，明年再来。</del></p>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息安全 </tag>
            
            <tag> HackerGame </tag>
            
            <tag> Writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NixOS安装open-vm-tools</title>
      <link href="/nix-open-vm-tools.html"/>
      <url>/nix-open-vm-tools.html</url>
      
        <content type="html"><![CDATA[<p>1.在<code>configuration.nix</code>添加<code>open-vm-tools</code>软件包；<br>2.在<code>configuration.nix</code>添加以下行：<code>virtualisation.vmware.guest.enable = true;</code>；<br>3.运行<code>nixos-rebuild switch</code>应用更改，无需重启，立即生效。</p>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
            <tag> NixOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS安装openpose</title>
      <link href="/openpose-macos.html"/>
      <url>/openpose-macos.html</url>
      
        <content type="html"><![CDATA[<p>做项目要用，装一个咯。<br>这里的配置是安装Python库并使用CPU_ONLY模式。<br>改天看看怎么启用OpenCL吧。虽然估计这破核显快不到哪去。<br>1.克隆openpose仓库及caffe、pybind11、模型</p><pre><code>git clone https://github.com/CMU-Perceptual-Computing-Lab/openpose.gitcd openpose/3rdpartygit clone https://github.com/CMU-Perceptual-Computing-Lab/caffe.gitgit clone https://github.com/pybind/pybind11.gitcd ../models./getModels.sh</code></pre><p>2.安装依赖（先安装brew，不知道怎么安装的请自行搜索）</p><pre><code>cd .../scripts/osx/install_deps.sh</code></pre><p>3.安装cmake_gui</p><pre><code>brew install brew-cask-completion # 如果已安装brew cask则跳过此步骤brew install --cask cmake</code></pre><p>4.启动台中找到CMake，source code选openpose根目录，build binaries则选openpose下的build目录。若build目录不存在则自己建一个。<br>5.点击Configure，如果有红色高亮项目出现就多点几次，直到不出现为止。<br>6.勾选BUILD_PYTHON，重复4。<br>7.点击Generate，多点几次。<br>8.在build目录下，执行以下命令开始编译：</p><pre><code>make -j`sysctl -n hw.logicalcpu`</code></pre><p><img src="/images/2100364622.png"><br>9.返回根目录，在根目录运行示例。<br>cpp示例位于<code>openpose/build/examples/tutorial_api_cpp</code>；<br>python示例<code>openpose/build/examples/tutorial_api_python</code>。<br>例如：</p><pre><code># 该命令需在openpose根目录运行./build/examples/openpose/openpose.bin --video examples/media/video.avi# 该命令依赖opencv-python(cv2)，请先安装python ./build/examples/tutorial_api_python/01_body_from_image.py</code></pre><p><img src="/images/577232703.png"><br><img src="/images/2798152345.png"></p>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenPose </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HBuilderX自带uniapp-cli食用方法</title>
      <link href="/hx-uniapp-cli.html"/>
      <url>/hx-uniapp-cli.html</url>
      
        <content type="html"><![CDATA[<p>最近写了一个一键发布微信小程序的HBuilderX插件，需要手动执行Uni-App的编译命令。官方文档中只有通过cli创建的项目才能通过cli编译项目，经过翻找HBuilderX的日志以及阅读编译器的代码，将uniapp-cli编译方法整理如下（此处以macOS版为例，其他操作系统同理）：</p><ul><li><p>1.<code>cd</code>至<code>/Applications/HBuilderX.app/Contents/HBuilderX/plugins/uniapp-cli</code>；</p></li><li><p>2.设置环境变量<code>NODE_ENV</code>为<code>development</code>或<code>production</code>；</p></li><li><p>3.设置环境变量<code>UNI_INPUT_DIR</code>为Uni-App项目目录；</p></li><li><p>4.设置环境变量<code>UNI_OUTPUT_DIR</code>为输出目录；</p></li><li><p>5.设置环境变量<code>UNI_PLATFORM</code>为目标平台，参见<a href="https://uniapp.dcloud.io/quickstart-cli">官方文档</a>；</p></li><li><p>6.运行命令<code>"/Applications/HBuilderX.app/Contents/HBuilderX/plugins/node/node" --max-old-space-size=2048 /Applications/HBuilderX.app/Contents/HBuilderX/plugins/uniapp-cli/bin/uniapp-cli.js</code>。<br>运行结果：<br><img src="/images/3043982037.png" alt="iShot2021-08-12 22.26.24.png"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Uni-App </tag>
            
            <tag> HBuilderX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构 二叉树和森林的小系统</title>
      <link href="/tree-forest.html"/>
      <url>/tree-forest.html</url>
      
        <content type="html"><![CDATA[<p><del>数据结构虐我千百遍 我待数据结构如初恋</del><br><strong>声明：发表在博客的所有数据结构作业源码均为本人独立编写。</strong><br>题目：设计一个树和森林的小系统，包含以下功能，并可采用菜单方式来选择相应功能：</p><ul><li><p>采用多种方式建树或森林（指定输入、读入文件等）；</p></li><li><p>实现各遍历算法；例如：如图2所示的森林，后序遍历森林的序列输出：KEFBGCHIJDALNM</p></li><li><p>与二叉树的相互转换（如图2-图3所示）；<br><img src="/images/684325027.png"></p><pre><code>#include &lt;iostream&gt;#include &lt;fstream&gt;using namespace std;struct Node{  char data;  Node *child, *brother;  Node(): data('\0'), child(NULL), brother(NULL){};  Node(char data_): data(data_), child(NULL), brother(NULL){};};Node *root = new Node(' ');void initialize(Node *father, fstream *file){  int child_count;  if(file) *file &gt;&gt; child_count;  else cin &gt;&gt; child_count;  if(child_count == 0) return;  char data;  if(file) *file &gt;&gt; data;  else cin &gt;&gt; data;  father-&gt;child = new Node(data);  initialize(father-&gt;child, file);  Node *p = father-&gt;child;  for(int i = 1; i &lt; child_count; i++){      if(file) *file &gt;&gt; data;      else cin &gt;&gt; data;      p-&gt;brother = new Node(data);      initialize(p-&gt;brother, file);      p = p-&gt;brother;  }}void goThrough(Node *head){  if(head &amp;&amp; head-&gt;child){      Node *p = head-&gt;child;      while(p){          goThrough(p);          cout &lt;&lt; p-&gt;data;          p = p-&gt;brother;      }  }}struct BNode{  char data;  BNode *lchild, *rchild;  BNode(): data('\0'), lchild(NULL), rchild(NULL){};  BNode(char data_): data(data_), lchild(NULL), rchild(NULL){};};BNode *broot;void convert(Node *thead, BNode *bhead){  if(thead){      if(thead-&gt;child) bhead-&gt;lchild = new BNode(thead-&gt;child-&gt;data);      if(thead-&gt;brother) bhead-&gt;rchild = new BNode(thead-&gt;brother-&gt;data);      convert(thead-&gt;child, bhead-&gt;lchild);      convert(thead-&gt;brother, bhead-&gt;rchild);  }}void frontGoThrough(BNode *head){  if(head){      cout &lt;&lt; head-&gt;data;      if(head-&gt;lchild) frontGoThrough(head-&gt;lchild);      if(head-&gt;rchild) frontGoThrough(head-&gt;rchild);  }}int main(){  int method;  cout &lt;&lt; "请选择建立方法：1.输入；2.文件：";  cin &gt;&gt; method;  // method = 2;  switch (method){      case 1:          cout &lt;&lt; "请输入要建立的树：" &lt;&lt; endl;          initialize(root, NULL);          break;      case 2:{          fstream f;          f.open("./tree.txt", ios::in);          if(!f.is_open()){              cout &lt;&lt; "文件打开失败！" &lt;&lt; endl;              exit(0);          }          initialize(root, &amp;f);          break;      }      default:          cout &lt;&lt; "输入错误，即将退出！" &lt;&lt; endl;          exit(0);  }  root = root-&gt;child;  cout &lt;&lt; "建立成功！" &lt;&lt; endl;  cout &lt;&lt; "森林后序遍历：";  goThrough(root);  broot = new BNode(root-&gt;data);  convert(root, broot);  cout &lt;&lt; endl &lt;&lt; "转换为二叉树后的前序遍历：";  frontGoThrough(broot);  return 0;}</code></pre><p>示例数据：<code>3 A 3 B 2 E 1 K 0 F 0 C 1 G 0 D 3 H 0 I 0 J 0 L 0 M 1 N 0</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 哈夫曼树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>输出哈夫曼树各叶子结点的编码</title>
      <link href="/huffman-codes.html"/>
      <url>/huffman-codes.html</url>
      
        <content type="html"><![CDATA[<pre><code class="cpp">#include &lt;iostream&gt;using namespace std;struct Node{    int data;    Node *lchild, *rchild;};bool compare(Node *p, Node *q){    return p-&gt;data &gt; q-&gt;data;}void setup(Node *arr[], int count){    Node *p;    while(count &gt; 1){        sort(arr, arr + count, compare);        p = new Node;        p-&gt;data = arr[count - 1]-&gt;data + arr[count - 2]-&gt;data;        p-&gt;lchild = arr[count - 1];        p-&gt;rchild = arr[count - 2];        arr[(count--) - 2] = p;    }}void show(Node *head, int n){    if(head-&gt;lchild == NULL &amp;&amp; head-&gt;rchild == NULL){        cout &lt;&lt; head-&gt;data &lt;&lt; endl;    }    if(head-&gt;lchild != NULL) show(head-&gt;lchild, n + 1);    if(head-&gt;rchild != NULL) show(head-&gt;rchild, n + 1);}int main(){    int numbers[10] = {2,3,5,7,9,10,12,15,18,20};    Node *arr[10];    for(int i = 0; i &lt; 10; i++){        arr[i] = new Node;        arr[i]-&gt;data = numbers[i];        arr[i]-&gt;lchild = NULL;        arr[i]-&gt;rchild = NULL;    }    setup(arr, 10);    show(arr[0], 1);    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 哈夫曼树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自编译 linux下pycryptodome和lxml x86-64二进制文件</title>
      <link href="/pycrypto-lxml.html"/>
      <url>/pycrypto-lxml.html</url>
      
        <content type="html"><![CDATA[<p>网上的版本都非常旧了，这里的pycryptodome版本为3.10.1，支持用于腾讯云函数的层。<br>pycryptodome: <a href="https://miit.lanzoui.com/iy74ept4ide">https://miit.lanzoui.com/iy74ept4ide</a><br>lxml: <a href="https://miit.lanzoui.com/iaUpept4ipg">https://miit.lanzoui.com/iaUpept4ipg</a></p>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 腾讯云函数 </tag>
            
            <tag> serverless </tag>
            
            <tag> pycryptodome </tag>
            
            <tag> lxml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>inSoraSky Telegram贴纸下载API</title>
      <link href="/telegram-sticker-api.html"/>
      <url>/telegram-sticker-api.html</url>
      
        <content type="html"><![CDATA[<p>如果需要<code>https</code>，请自行更改协议前缀。<br>1.获取贴纸包信息API：<br><code>http://service.sorasky.in/Stick/get_sticker_set?name=（贴纸包名称）</code><br>2.下载贴纸API：<br><code>http://service.sorasky.in/Stick/download?id=（贴纸的file_id）</code><br>如果贴纸存在，则返回webp格式的贴纸图片。</p>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Telegram </tag>
            
            <tag> 贴纸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xposed模块检测自身是否启用(kotlin)</title>
      <link href="/xposed-module-is-enabled.html"/>
      <url>/xposed-module-is-enabled.html</url>
      
        <content type="html"><![CDATA[<p>作为一个xposed模块，检测自身是否启用显然是最基础的功能了。本教程使用kotlin，Java应该差不多。<br>原理是Hook自身，修改状态语以提示用户。</p><ul><li>1.在准备显示启用状态的Activity中定义函数<code>isEnabled</code>：<pre><code class="kotlin"> fun isEnabled(): String{     return "模块未启用！" }</code></pre></li><li>2.创建窗口时将状态文本控件的值设为<code>isEnabled</code>函数的返回值：<pre><code class="kotlin"> // 假设已经定义名为status的TextView控件并创建ViewBinding binding.status.text = isEnabled()</code></pre></li><li>3.在hook函数中篡改isEnabled函数的返回值<pre><code class="kotlin">public class Hook: IXposedHookLoadPackage{ override fun handleLoadPackage(lpparam: XC_LoadPackage.LoadPackageParam?){     when(lpparam?.packageName){         "com.example.xposed.module" -&gt; { // 将这里的包名更改为自己的xposed模块             val clazz = lpparam.classLoader?.loadClass("com.example.xposed.module.MainActivity") // 将这里的Activity名称更改为显示状态的Activity名称             XposedHelpers.findAndHookMethod(clazz, "isEnabled", object : XC_MethodHook() {                 override fun beforeHookedMethod(param: MethodHookParam?) {                     super.beforeHookedMethod(param)                 }                 override fun afterHookedMethod(param: MethodHookParam?) {                     param?.result = "模块已启用！"                 }             })         }     } }}</code></pre></li></ul><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><ul><li><p>未启用时：<br><img src="/images/131232705.png"></p></li><li><p>已启用时：<br><img src="/images/2405531513.png"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kotlin </tag>
            
            <tag> Xposed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义mitmproxy使用的证书颁发者名称</title>
      <link href="/custom-mitm-ca-authority.html"/>
      <url>/custom-mitm-ca-authority.html</url>
      
        <content type="html"><![CDATA[<p>最近做了一个需要使用代理的Python小工具，看到证书详情里的<code>mitmproxy</code>强迫症犯了，于是把它改了。<br>1.引用所需的库</p><pre><code class="python">from mitmproxy.certs import CertStore</code></pre><p>2.当前目录下的证书目录<code>./certs</code>不存在时，自动创建证书</p><pre><code class="python">if not os.path.exists('./certs'):    CertStore.create_store(        path=os.path.abspath('./certs'),        basename='mitmproxy',        key_size=2048,        organization='Your_Organization_Name',        cn='Your_CN_Name'    )</code></pre><p>3.启动mitmproxy时将当前证书设为HTTPS证书：</p><pre><code class="python">from mitmdump import DumpMaster, Optionsoptions = Options(    scripts=__file__,    confdir=os.path.abspath('./certs'))dm = DumpMaster(options)dm.run()</code></pre>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> mitmproxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用C++写一个栈并判断括号是否配对</title>
      <link href="/cpp-stack.html"/>
      <url>/cpp-stack.html</url>
      
        <content type="html"><![CDATA[<p>数据结构作业</p><pre><code class="cpp">#include &lt;iostream&gt;using namespace std;enum status_code {success, overflow, underflow};template &lt;class Type, int max&gt;class Stack{    public:        Stack();        bool is_full();        bool is_empty();        status_code push(Type num);        status_code pop();        status_code get_top(Type &amp;num);        void show_all();    private:        int count;        int data[max];};template &lt;class Type, int max&gt;Stack&lt;Type, max&gt;::Stack(){    count = -1;}template &lt;class Type, int max&gt;bool Stack&lt;Type, max&gt;::is_full(){    return (count == max - 1);}template &lt;class Type, int max&gt;bool Stack&lt;Type, max&gt;::is_empty(){    return (count == -1);}template &lt;class Type, int max&gt;status_code Stack&lt;Type, max&gt;::push(Type num){    if(is_full()) return overflow;    data[++count] = num;    return success;}template &lt;class Type, int max&gt;status_code Stack&lt;Type, max&gt;::pop(){    if(is_empty()) return underflow;    --count;    return success;}template &lt;class Type, int max&gt;status_code Stack&lt;Type, max&gt;::get_top(Type &amp;num){    if(is_empty()) return underflow;    num = data[count];    return success;}template &lt;class Type, int max&gt;void Stack&lt;Type, max&gt;::show_all(){    for(int i = 0; i &lt;= count; ++i){        cout &lt;&lt; data[i] &lt;&lt; " ";    }    cout &lt;&lt; "\n";}int main(){    Stack&lt;char, 100&gt; stack;    string data;    char current;    cin &gt;&gt; data;    for(int i = 0; i &lt; data.length(); ++i){        if(stack.get_top(current) == underflow &amp;&amp; i) break;        switch(data[i]){            case ')':                if(current == '(') stack.pop(); break;            case ']':                if(current == '[') stack.pop(); break;            case '}':                if(current == '{') stack.pop(); break;            default:                stack.push(data[i]);        }    }    cout &lt;&lt; (stack.is_empty() ? "括号配对" : "括号不配对");    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mirai-console-loader在Linux下的使用</title>
      <link href="/mirai-console-linux.html"/>
      <url>/mirai-console-linux.html</url>
      
        <content type="html"><![CDATA[<p>本人环境：<code>CentOS 7 + 自带的JRE1.8.0</code></p><h2 id="1-安装JDK11"><a href="#1-安装JDK11" class="headerlink" title="1.安装JDK11"></a>1.安装<code>JDK11</code></h2><pre><code>yum -y install java-11-openjdk-*alternatives --config java</code></pre><p>之后选择JDK11即可。</p><h2 id="2-安装mirai-console-loader"><a href="#2-安装mirai-console-loader" class="headerlink" title="2.安装mirai-console-loader"></a>2.安装mirai-console-loader</h2><ul><li>从<a href="https://github.com/iTXTech/mirai-console-loader/releases">releases</a>获取最新版的<code>mirai-console-loader</code>后，将其解压在你要安装<code>mirai-console-loader</code>的目录下；</li><li>编辑<code>./mcl</code>，在第3行的<code>-jar mcl.jar $*</code>前加入<code>-Dmirai.slider.captcha.supported</code>，使之变成<code>$JAVA_BINARY -Dmirai.slider.captcha.supported -jar mcl.jar $*</code>；</li><li>给<code>./mcl</code>加上可执行权限：<code>chmod +x ./mcl</code>；</li><li>运行<code>./mcl</code>；</li><li>输入<code>/login &lt;机器人QQ号&gt; &lt;机器人QQ密码&gt;</code>回车；</li><li>如果要求滑动验证，请打开浏览器隐私窗口，调出开发者工具（F12），通过开发者工具设置为安卓UA；</li><li>打开命令行中获得的地址；</li><li>打开浏览器<code>console</code>，将这里的所有内容粘贴至控制台中回车，若返回true则为成功；</li><li>完成滑动验证，将弹出的密钥粘贴至命令行回车；</li><li>如果要求设备锁验证，请按照命令行提示，将命令行中的地址复制到浏览器，按照页面要求完成设备锁验证后在命令行回车；</li><li>若命令行提示<code>Login successful</code>则登录成功</li></ul><blockquote><p>如果需要后台运行，执行<code>./mcl &amp;</code>即可。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mirai </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kotlin 十六进制文本(String)和字节集(ByteArray)互转</title>
      <link href="/kt-str-bytearray.html"/>
      <url>/kt-str-bytearray.html</url>
      
        <content type="html"><![CDATA[<pre><code class="kotlin">object HexUtils {    fun hexStringToBytes(hexString: String?): ByteArray? {        @Suppress("NAME_SHADOWING")        var hexString = hexString        if (hexString == null || hexString == "") {            return null        }        hexString = hexString.toUpperCase()        val length = hexString.length / 2        val hexChars = hexString.toCharArray()        val data = ByteArray(length)        for (i in 0 until length) {            val pos = i * 2            data[i] = (charToByte(hexChars[pos]).toInt() shl 4 or charToByte(hexChars[pos + 1]).toInt()).toByte()        }        return data    }    fun bytesToHexString(src: ByteArray?): String? {        val stringBuilder = StringBuilder("")        if (src == null || src.isEmpty()) {            return null        }        for (element in src) {            val v = element.toInt() and 0xFF            val hv = Integer.toHexString(v)            if (hv.length &lt; 2) {                stringBuilder.append(0)            }            stringBuilder.append(hv)        }        return stringBuilder.toString()    }    private fun charToByte(c: Char): Byte {        return "0123456789ABCDEF".indexOf(c).toByte()    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记最近的两个Windows致死路径</title>
      <link href="/win-err-path.html"/>
      <url>/win-err-path.html</url>
      
        <content type="html"><![CDATA[<pre><code>    \\.\globalroot\device\condrv\kernelconnect    cd c:\:$i30:$bitmap</code></pre>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 蓝屏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP6.0找不到控制器时展示404页面而非“方法不存在”错误页</title>
      <link href="/tp6-404-page.html"/>
      <url>/tp6-404-page.html</url>
      
        <content type="html"><![CDATA[<p>默认情况下，TP6当开启调试模式时，试图访问一个不存在的控制器时会返回以下页面：<br><img src="/images/2611135732.png"><br>如果你没有打开调试模式就长这样：<br><img src="/images/3972674340.png"><br>一般情况下，“找不到控制器”对于用户来说就是404找不到页面，并且在调试模式没有关闭时容易泄露服务器信息。<br>##1.http_exception_template（仅适用于部署模式）<br>ThinkPHP自带了http_exception_template配置用于设置抛出HTTP错误时使用的模板文件。<br>优点：配置简单；缺点：仅适用于部署模式、各个错误码需单独设置。<br>在app.php内添加以下内容：</p><pre><code>'http_exception_template'    =&gt;  [    // 404    404 =&gt; \think\facade\App::getRootPath().'404.html',     //getRootPath为获取项目根目录，可根据实际情况修改    // 其他错误码    401 =&gt; \think\facade\App::getRootPath().'401.html',]</code></pre><p>##2.ExceptionHandle<br>ExceptionHandle.php中预置了异常处理类，只需捕获HttpException异常即可返回各个页面的错误码。<br>在ExceptionHandle.php自带的<code>return parent::render($request, $e);</code>下方添加以下内容：</p><pre><code>if($e instanceof HttpException){    return response("网页错误：".$e-&gt;getStatusCode(), $e-&gt;getStatusCode());}</code></pre><p>其中response助手函数的第一个参数为返回的页面内容，可自行修改或套模板。</p>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThinkPHP </tag>
            
            <tag> 404 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好，2021！</title>
      <link href="/hello-2021.html"/>
      <url>/hello-2021.html</url>
      
        <content type="html"><![CDATA[<p>这个跨年是inSoraSky博客的第一次跨年，在博客成立175天暨2021元旦之际，祝大家新年快乐！<br>2020年，我在本博客共发布了<strong>31</strong>篇文章（包含已隐藏文章），累计PV达近<strong>58000</strong>次，独立访客达近<strong>12000</strong>人，评论数达近<strong>100</strong>条。<br>尽管评论数有点少，但是能有这么多游客访问我的博客并稍微看上一眼，作为刚出生不到半年的博客的站长，我其实已经很满足了（<br>同时在这一年里，我度过了18岁生日，度过了高三，考上了大学，拥有了人生中第一部Xiaomi Mi 10 Pro，自学了Python、Kotlin和微信小程序，<del>佐伯女士也有了女朋友</del>……<br>尽管2020年是多灾多难的一年，对我来说也无比重要。<br>总之今年我们继续加油吧！頑張ってねぇ！<br><img src="/images/2516772770.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2021 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kotlinc警告：Options -Xverify:none and -noverify were deprecated in JDK 13 and will likely be removed in a future release.</title>
      <link href="/kotlinc-noverify.html"/>
      <url>/kotlinc-noverify.html</url>
      
        <content type="html"><![CDATA[<p>在JDK 14.0.2+Windows 10下使用kotlinc时，会警告：<code>Java HotSpot(TM) 64-Bit Server VM warning: Options -Xverify:none and -noverify were deprecated in JDK 13 and will likely be removed in a future release.</code>，这是因为在未来的Java版本中将删去这两个特性导致的。<br>解决方法：<br>1.找到kotlinc所在的bin目录；<br>2.备份kotlinc.bat；<br>3.用文本编辑器打开kotlinc.bat；<br>4.找到<code>"%_JAVACMD%" %JAVA_OPTS% -noverify -cp "%_KOTLIN_HOME%\lib\kotlin-preloader.jar" ^</code>，删去其中的<code>-noverify</code>，变成<code>"%_JAVACMD%" %JAVA_OPTS% -cp "%_KOTLIN_HOME%\lib\kotlin-preloader.jar" ^</code>；<br>5.保存，运行，就不会出现这样的警告了。<br><img src="/images/3917192769.png"></p>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> kotlinc </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何获取Zhixue-K邀请码？</title>
      <link href="/zxk-invitecode.html"/>
      <url>/zxk-invitecode.html</url>
      
        <content type="html"><![CDATA[<h1 id="为什么设置内测邀请码制度？"><a href="#为什么设置内测邀请码制度？" class="headerlink" title="为什么设置内测邀请码制度？"></a>为什么设置内测邀请码制度？</h1><p>1、年段查询功能本身功能尚不完善，bug频出；<br>2、服务器资源有限；<br>3、避免访问量过大引起科大讯飞方面警觉；<br>4、服务器运营需要各种费用。</p><h1 id="如何获取邀请码？"><a href="#如何获取邀请码？" class="headerlink" title="如何获取邀请码？"></a>如何获取邀请码？</h1><p>1.联系先前已加入Zhixue-K内测的用户获取邀请码；<br>2.<del>关注本页面评论区，每月随机掉落3~10个邀请码。</del></p>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zhixue-K </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6一行代码生成0到N的数组</title>
      <link href="/es6-array-0ton.html"/>
      <url>/es6-array-0ton.html</url>
      
        <content type="html"><![CDATA[<pre><code>// 第一种方法Array.apply(null, {length: 10}).map((item, idx) =&gt; idx)// 第二种方法[...new Array(10)].map((item, idx) =&gt; idx)// 第三种方法[...new Array(10).keys()]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言：给定n个正整数，根据各位数字之和从小到大进行排序</title>
      <link href="/c-nint-sum-sort.html"/>
      <url>/c-nint-sum-sort.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/3901270663.png"></p><pre><code>/* * @Description: 给定n个正整数，根据各位数字之和从小到大进行排序。 * @version: 0.1 * @Author: Sora * @Date: 2020-10-30 18:13:00 * @LastEditors: Sora * @LastEditTime: 2020-10-30 18:59:20 * @Blog: http://www.sorasky.in/ */#include &lt;stdio.h&gt;#include &lt;math.h&gt;void bubble_sort(int arr[][2], int len) { //冒泡排序    int i, j, temp[2];    for (i = 0; i &lt; len - 1; i++)        for (j = 0; j &lt; len - 1 - i; j++)            if (arr[j][1] &gt; arr[j + 1][1]) {                temp[0] = arr[j][0];                temp[1] = arr[j][1];                arr[j][0] = arr[j + 1][0];                arr[j][1] = arr[j + 1][1];                arr[j + 1][0] = temp[0];                arr[j + 1][1] = temp[1];            }}int main(){    int n,a[1000][2];    scanf("%d", &amp;n);    for (int i = 1; i &lt;= n;i++){        scanf("%d", &amp;a[i][0]);        a[i][1] = 0;        for (int j = 1; j &lt;= 1 + (int)log10(a[i][0]); j++){            a[i][1] += a[i][0] / (int)pow(10, j - 1) % 10;        }    }    bubble_sort(a, n + 1);    for (int i = 1; i &lt;= n;i++){        printf("%d %d\n", a[i][0], a[i][1]);    }    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学校WebVPN折腾记</title>
      <link href="/webvpn-things.html"/>
      <url>/webvpn-things.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>学校的教务APP实在太拉跨，有时候没校园网直接GG，课程表都整不出来。<br>后来听说有学长大佬搞了个微信小程序叫“XX大课程表无敌版”：<img src="/images/1190160918.jpg"><br>这玩意功能是解决同学们在非校园网环境下获取课表的重重困难。 而我们学校唯一绕过校园网的方式是走VPN。<br>天天有同学跟我说翻墙也不能上教务，我TM听到了简直想当场去势。VPN是啥请自行百度。<br>这次我对这个工具也产生了兴趣，甚至想整个更好的。于是我开始了对校园WebVPN的研究。</p></blockquote><hr><p>折腾一个网站当然是从登录页开始，不然后面的怎么折腾。<br>登录页抓包如下：<img src="/images/3569904557.png"><br>好家伙，这玩意简单粗暴，密码明文传输。<br>只不过我没输验证码，哪来的captcha_id？<br>后经Postman测试，captcha_id放空即可。<img src="/images/2835982241.png"><br>这是我见过的最简单粗暴的登录包之一了。</p><hr><p>登录后界面长这样，给出了我们常用的校内链接：<img src="/images/507462433.png"><br>然后往下一番，还有一堆校外链接：<img src="/images/2004143730.png"><br>好家伙，合着这VPN还能上外网啊 @(huaji)<br>那我能不能让它上我指定的网站呢？<br>随便打开一个，网址是这个格式：<img src="/images/970616950.png"><br>网址被加密混淆过。我当时找不到混淆算法，总之先上。<br>知网上有个新浪微博的链接：<img src="/images/3822437316.png"><br>一点。成了。<img src="/images/3968698716.png"><br>接着我通过新浪微博进入新浪邮箱，再发了一个百度的链接给自己，通过这种方式成功打开了百度。<br>百度有了，打开其他的网站就容易了 @(huaji)。<br><img src="/images/1696982452.png"><br>WebVPN有个收藏夹功能，我把这些网站都加入了收藏夹。<img src="/images/2300792854.png"></p><hr><p>加入收藏夹以后，就出现了新的问题。</p><p>先挖个坑，下次一定 @(huaji)</p>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebVPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学校教务系统每日教室占用情况爬虫开发笔记</title>
      <link href="/jw-crawler.html"/>
      <url>/jw-crawler.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>去应聘学校电教，为了提高我的成功率（电教组要求为了排班每个专业最多两个，且总共就10个，还有工资，竞争压力很大（<del>虽然和我无关</del>），开始在群里吹水：<img src="/images/40736336.jpg" alt="Screenshot_2020-10-04-23-04-13-206_com.tencent.mm.jpg"><img src="/images/2669469897.jpg" alt="Screenshot_2020-10-04-23-04-08-748_com.tencent.mm.jpg"><br>吹完之前写的Zhixue-K（Zhixue-K是PHP写的，Python写的是暂未发布的Zhixue-X），有学长<del>发现了摸鱼的好机会</del>学长说是为了方便大一学弟那就是吧：<img src="/images/3382742716.jpg" alt="Screenshot_2020-10-04-23-09-31-505_com.tencent.mm.jpg"><br>第二天去现场，我被学长叫上去问我可不可行，我按了F12随便霍霍两下（话说居然是旧版edge诶）说可以，然后！</p></blockquote><blockquote><h3 id="然后！"><a href="#然后！" class="headerlink" title="然后！"></a>然后！</h3></blockquote><blockquote><h2 id="然后！-1"><a href="#然后！-1" class="headerlink" title="然后！"></a>然后！</h2></blockquote><blockquote><p>我就被破格录了！面试都省了……（<del>以至于他们面试问了啥我都不知道，有的人还以为我是学长</del> 然后学长跑了，叫我坐在上面组织面试，美名其曰【你已经是我们的成员了，来帮帮忙很正常对吧~】 ……</p></blockquote><hr><p>当然我总不能干坐在哪里等到谁就叫谁，毕竟我有任务是吧（<br>电脑拿出来干<br>打开教务系统长这样<img src="/images/1204591311.png" alt="QQ截图20201004232245.png"></p><blockquote><p>在我写这个爬虫之前，学长学姐们是这么抄表的：<br>有个表格，先把日期调到今天，然后调取1-2节数据，将有课的教室在表格上打个勾（教室是不按规则排的，也就是说学长学姐们可能要找半天），然后调取3-4节、5-6节、7-8节、9-11节……一直重复这样的工作。<br>然后他们根据这个表格在每天上课和下课的时候远程开关电脑和教室电源。 而我这个爬虫就是为了节省这种机械工作的时间。</p></blockquote><p>调出F12开发者工具抓包，包长这样：<img src="/images/1994399784.png" alt="QQ截图20201004232507.png"><br>通过浏览器直接访问，输出的是XML……<img src="/images/1893207054.png" alt="QQ截图20201005001237.png"><br>XML？？？好好的JSON哪里去了？<br>再回来看包，发现HTTP请求头里有这么个玩意：<img src="/images/2628931910.png" alt="QQ截图20201004232827.png"><br>把cookie原样搬到Postman上，成功输出：<img src="/images/3908354450.png" alt="QQ截图20201004232943.png"><br>既然主要接口成功输出了，那么接下来就是用户登录的问题。<br>登录界面抓包如下：<img src="/images/2017177769.png" alt="QQ截图20201004233602.png"><img src="/images/3102144277.png" alt="QQ截图20201004233732.png"><br>登录过程中使用了令牌，且密码加密混淆过。<br>而且这个登录包比较奇葩，正常的POST包在F12开发者工具中格式为：<code>参数名称: 参数内容</code><br>而这玩意是一整串json数据。<br>这种包的内容需要在Postman的Body选项卡中填写，可能需要设置HTTP头<code>Content-Type</code>为<code>application/json</code>。<br>翻找登录按钮JavaScript代码，找到密码规则：<code>encryptPassword = new String(CryptoJS.SHA1(salt + '-' + $("#p").val())) + "";</code><br>即将“salt-密码”的SHA1值。<br><strong>同时这意味着系统将密码明文或使用可逆加密方式保存于数据库中，而非常用的MD5+SHA1不可逆方式保存，否则系统无法验证密码正确性，即校方或黑客可轻易获取密码原文。</strong><br>Postman检验通过。<img src="/images/1012356169.png" alt="QQ截图20201004234333.png"><br>获得需要的接口以后，接下来就是正片——爬虫的编写。</p><hr><p>由于使用了sha1，需要引用hashlib的sha1库；<br>由于需要获取当日时间以下载当日课表，需要time库；<br>由于使用json获取数据，需要json库；<br>由于是爬虫，那么requests库是少不了的。</p><pre><code>from hashlib import sha1import json, requests, time</code></pre><p>和平常不同的是，登录包的json数据需要放在requests.post的data参数中，而不是params参数。<br>几番循环，就将当日的教室占用情况以教学楼——课时——教室的树状结构保存下来。<br>将输出结果给学长看，学长认为这不够直观，希望能够导出为Excel。<br>纯程序写Excel是不可能的，这玩意烧脑。<br>当初用PHP的PHPSpreadSheet写Zhixue-K的成绩导出都够呛。<br>最后我从学长那把原来的表格拿了过来，将各个教室/课时的表格坐标一个个输入，这样的话就可以直接编辑，不用考虑表格的格式问题。</p><hr><p>我使用的Excel库是xlutils，没有安装的同学可以使用pip安装：<br><code>pip install xlutils</code><br>安装时会自动安装依赖的xlrd（Excel读库）和xlwt（Excel写库）<br>之后遍历之前的树状结构，将数据写入表格，大功告成。<br><img src="/images/1377448005.jpg" alt="IMG_20201004_235839.jpg"><br>（<del>顺便，我不是强者，我是废物</del>）</p><hr><p>部分程序我会发布在GitHub上，发上去之后如果对你有帮助，劳烦给个Star呢<del>么么哒</del></p>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebVPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KaiSS - 适用于KaiOS设备的ShadowSocks客户端</title>
      <link href="/kaiss.html"/>
      <url>/kaiss.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-KaiSS是什么？"><a href="#1-KaiSS是什么？" class="headerlink" title="1.KaiSS是什么？"></a>1.KaiSS是什么？</h2><p>KaiSS是适用于KaiOS设备的第三方ShadowSocks客户端，目前为0.1版本，只有最基础的安装配置服务、启动服务、停止服务三种功能<del>（甚至连配置数据保存功能都没有啊蛤蛤蛤）</del>，但我后续可能会完善的！欢迎发issue和贡献代码！（发完issue希望能在博客吱一声，我能看见）<br><img src="/images/301985154.png" alt="2020-08-23-23-47-35.png"></p><h2 id="2-KaiSS怎么用？"><a href="#2-KaiSS怎么用？" class="headerlink" title="2.KaiSS怎么用？"></a>2.KaiSS怎么用？</h2><p>1.使用OmniSD/WebIDE/GerdaPkg将KaiSS安装至您的kaiOS设备上；</p><p>2.使用Wallace/Wallace Toolbox等应用root您的设备；</p><p>3.启动KaiSS，安装服务；</p><p>4.点击启动服务，输入服务器地址、服务器端口、密码、加密模式（小写、使用横杠“-”而不是下划线“_”）</p><p>5.由于是测试版，如果没有成功启用，请使用Wallace Toolbox设置代理服务器为127.0.0.1，端口1081，并启用代理；</p><p>6.如需停止服务，可直接在Wallace Toolbox中停止，也可在KaiSS界面内停止，如果没有成功禁用代理（浏览器报错“无法连接代理服务器”）可再使用Wallace Toolbox停止。</p><h2 id="3-哪里下载？"><a href="#3-哪里下载？" class="headerlink" title="3.哪里下载？"></a>3.哪里下载？</h2><p><a href="https://github.com/insorasky/KaiSS/releases">https://github.com/insorasky/KaiSS/releases</a></p><p><gb>insorasky/KaiSS</gb></p><h2 id="4-有问题如何反馈？"><a href="#4-有问题如何反馈？" class="headerlink" title="4.有问题如何反馈？"></a>4.有问题如何反馈？</h2><p>欢迎在本页面评论区反馈。</p>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ShadowSocks </tag>
            
            <tag> KaiOS </tag>
            
            <tag> OmniSD </tag>
            
            <tag> WebIDE </tag>
            
            <tag> Gerda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>福建省教育考试院录取结果页 自动填写帐号密码考生号</title>
      <link href="/eeafj.html"/>
      <url>/eeafj.html</url>
      
        <content type="html"><![CDATA[<p>瞎写的油猴脚本，估计没几个人感兴趣就是了</p><pre><code class="javascript">// ==UserScript==// @name         录取结果// @namespace    http://www.sorasky.in/// @version      0.1// @description  福建省教育考试院 录取结果 自动填写帐号密码考生号// @author       Sora// @match        http://gk.eeafj.cn/jsp/result/lqjg/result_enter.jsp// @grant        none// @require      https://cdn.staticfile.org/jquery/3.5.1/jquery.min.js// ==/UserScript==(function() {    'use strict';    var name = "身份证号"; //身份证号    var pwd = "密码"; //密码    var id = "考生号"; //考生号    $("#logname").val(name);    $("#pwd").val(pwd);    $("input[name='ksh']").val(id);    document.getElementById("check").focus();})();</code></pre>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EEAFJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在资源管理器右键菜单中添加“使用 Windows Terminal 打开”</title>
      <link href="/rightkey-wt.html"/>
      <url>/rightkey-wt.html</url>
      
        <content type="html"><![CDATA[<p>将以下注册表文件导入注册表：</p><pre><code>Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\Directory\Background\shell\WindowsTerminal]@="使用 Windows &amp;Terminal 打开"[HKEY_CLASSES_ROOT\Directory\Background\shell\WindowsTerminal\command]@="C:\\Users\\***（你的用户名称）***\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe -d \"%V\""</code></pre><p>应用后即可见到效果。</p>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows Terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL 各大发行版离线安装包</title>
      <link href="/wsl-installer.html"/>
      <url>/wsl-installer.html</url>
      
        <content type="html"><![CDATA[<p>你是否因为网速太慢，下载不了WSL而焦虑？<br>你是否因为上不了微软商店而烦恼？<br>好消息！好消息！WSL离线安装包来啦！<br><del>（对不起我编不下去了</del></p><h2 id="1-官方下载地址"><a href="#1-官方下载地址" class="headerlink" title="1.官方下载地址"></a>1.官方下载地址</h2><p><a href="https://aka.ms/wslubuntu2004">Ubuntu 20.04</a><a href="https://aka.ms/wslubuntu2004arm">Ubuntu 20.04 ARM</a><a href="https://aka.ms/wsl-debian-gnulinux">Debian</a><a href="https://aka.ms/wsl-kali-linux-new">Kali Linux</a><a href="https://aka.ms/wsl-opensuse-42">OpenSUSE Leap 42</a><a href="https://aka.ms/wsl-sles-12">SUSE Linux Enterprise Server 12</a><a href="https://github.com/WhitewaterFoundry/WSLFedoraRemix/releases/">Fedora Remix</a></p><h2 id="2-国内下载地址（100M内的传蓝奏，100M以上的传百度云）"><a href="#2-国内下载地址（100M内的传蓝奏，100M以上的传百度云）" class="headerlink" title="2.国内下载地址（100M内的传蓝奏，100M以上的传百度云）"></a>2.国内下载地址（100M内的传蓝奏，100M以上的传百度云）</h2><p>所有的：<a href="https://pan.baidu.com/s/1jsnxYrXmer9O4UeQDHUwqg">https://pan.baidu.com/s/1jsnxYrXmer9O4UeQDHUwqg</a> 提取码：wsl2<br>Debian 9.5 蓝奏云：<a href="https://www.lanzoux.com/ictncfu8s4f">https://www.lanzoux.com/ictncfu8s4f</a></p><h2 id="3-安装方法"><a href="#3-安装方法" class="headerlink" title="3.安装方法"></a>3.安装方法</h2><p>双击安装包安装即可。</p><blockquote><p>建议在安装前<a href="https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-kernel#download-the-linux-kernel-update-package">安装WSL2包</a>并运行<code>wsl --set-default-version 2</code>将默认WSL版本设为WSL2。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL 默认用户设为root</title>
      <link href="/wsl-default-root.html"/>
      <url>/wsl-default-root.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-查看Linux发行版启动命令名称"><a href="#1-查看Linux发行版启动命令名称" class="headerlink" title="1.查看Linux发行版启动命令名称"></a>1.查看Linux发行版启动命令名称</h2><p>Win+R输入发行版名称，若弹出相应发行版终端则为该名称；若你的发行版名称比较奇葩以至于无法直接打开（例如商店里Ubuntu名称为ubuntu，而Ubuntu 20.04名称为ubuntu2004），请在文件资源管理器内打开<code>C:\Users\（当前Windows用户名）\AppData\Local\Microsoft\WindowsApps</code>以查看该发行版的命令名称。<br><img src="/images/671943728.png" alt="批注 2020-08-19 221218.png"></p><h2 id="2-设置默认用户"><a href="#2-设置默认用户" class="headerlink" title="2.设置默认用户"></a>2.设置默认用户</h2><ul><li>启动PowerShell或cmd</li><li>键入<code>发行版命令名称 config --default-user root</code>回车，正常情况下没有任何输出</li><li>启动Linux终端，发现变为<code>root@***:~#·</code></li></ul><h2 id="3-设置默认启动目录"><a href="#3-设置默认启动目录" class="headerlink" title="3.设置默认启动目录"></a>3.设置默认启动目录</h2><ul><li>进入Linux发行版</li><li>键入<code>echo "cd" &gt;&gt; ~/.bashrc</code>回车</li><li>重新打开终端，默认目录变为<code>~</code>即root用户目录<code>/root</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>像使用浏览器一样用快捷键操作Windows Terminal</title>
      <link href="/wt-like-browser.html"/>
      <url>/wt-like-browser.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本配置清单支持的快捷键有：<br>Ctrl+C 复制<br>Ctrl+V 粘贴<br>Ctrl+F 查找<br>Ctrl+W 关闭<br>F11 全屏<br>Ctrl+T 新建选项卡<br>Ctrl+Shift+T 新建窗格<br>Ctrl+Tab 向后切换选项卡<br>Ctrl+Shift+Tab 向前切换选项卡<br>Ctrl+Shift+O 打开下拉栏（收藏夹）<br><img src="/images/334318540.png"><br>Windows Terminal——下拉菜单——设置或直接按<code>Ctrl+,</code>打开设置文件，将keybindings后中括号内的所有内容全部删除，更换为下面的内容：</p></blockquote><pre><code>{ "command": {"action": "copy", "singleLine": false }, "keys": "ctrl+c" },{ "command": "paste", "keys": "ctrl+v" },{ "command": "find", "keys": "ctrl+f" },//{ "command": "closeTab","keys" :"ctrl+w"}, //直接关闭选项卡{ "command": "closePane", "keys": "ctrl+w" } //关闭窗格，无窗格时关闭选项卡{ "command": "toggleFullscreen", "keys": "f11" },{ "command": "newTab", "keys": "ctrl+t"},{ "command": "nextTab", "keys": "ctrl+tab" },{ "command": "prevTab", "keys": "ctrl+shift+tab" },{ "command": "openNewTabDropdown", "keys": "ctrl+shift+o" },{ "command": { "action": "splitPane", "split": "auto", "splitMode": "duplicate" }, "keys": "ctrl+shift+t" }</code></pre><p>保存即可。</p><blockquote><p>小Tip：Win+R，输入wt即可启动Windows Terminal，是不是很快捷~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows Terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware安装Windows 2000时需要在客户机上安装的KB835732补丁</title>
      <link href="/kb835732.html"/>
      <url>/kb835732.html</url>
      
        <content type="html"><![CDATA[<p>闲来无事在VMware虚拟机上安装Win2000，全屏+自由拉伸+独占模式，啊<del>仿佛成为了1999年就拥有电脑的富豪（大雾（<del>那个时候的电脑哪有这么轻薄啊</del><br><img src="/images/2692586784.jpg" alt="IMG_20200817_231005.jpg"><br>然而不愉快的是安装VMware Tools时出现了个这玩意：<br><img src="/images/2349043561.png" alt="Windows 2000 Professional-2020-08-17-22-16-45.png"><br>网上教程曰：Win+R运行<code>%temp%</code>，打开`{某某GUID}</del>setup`，双击VMware Tools安装<br><img src="/images/4279181028.png" alt="Windows 2000 Professional-2020-08-17-22-16-59.png"><br><img src="/images/1445376910.png" alt="Windows 2000 Professional-2020-08-17-22-17-17.png"><br>结果好家伙装了好久给我来个<strong>回退</strong>！<strong>回退</strong>！ @(pen)<br>好嘛你图里给了个KB号我就去查然后下载然后安装然后重启然后可以然后愉快地玩耍了……</p><hr><blockquote><p>放心是你们心爱的<em><strong>蓝奏云</strong></em> @(huaji_shang)<br>32位KB835732补丁下载地址：<a href="https://www.lanzoux.com/izjeMfqi9mf">https://www.lanzoux.com/izjeMfqi9mf</a> （需要在Win2000客户机上装，通过网络或ISO或U盘或挂载虚拟硬盘balabala等方式搞到Win2000里安装即可）<br><br><br>VMware Tools for Windows 2000/XP 下载地址：<a href="https://www.lanzoux.com/idYZbfqio4h">https://www.lanzoux.com/idYZbfqio4h</a> （下载后放在VMware Workstation/Player根目录即可）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
            <tag> Windows 2000 </tag>
            
            <tag> KB835732 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode 通过“运行”窗口启动时有命令行窗口无法自动消失的解决办法</title>
      <link href="/vscode-cmd-window.html"/>
      <url>/vscode-cmd-window.html</url>
      
        <content type="html"><![CDATA[<p>在Windows系统下，VSCode在安装时默认已被加入PATH环境变量豪华午餐，按Windows+R键，输入code回车即可快速运行VSCode。但是安装时会弹出一个黑色的cmd命令行窗口且无法关闭，我的解决方法如下：<br>（本人环境：Windows 10 2004）<br>1.开始菜单——Visual Studio Code——右键——更多——打开文件位置；<br><img src="/images/1015592468.png"><br>2.弹窗——Visual Studio Code——右键——打开文件所在的位置(Win10或右键菜单有此选项的同学)或属性——打开文件所在的位置(右键菜单无此选项的同学；<br><img src="/images/1824917359.png"><br>3.进入bin目录，将code.cmd更名为code_bak.cmd；<br>4.返回上一个目录，按住Alt键将Code.exe拖入bin目录中；<br>5.返回bin目录，将刚刚创建的Code.exe快捷方式更名为code；<br>6.按Win+R键输入code回车测试效果，发现黑色窗口消失了！</p>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
            <tag> Visual Studio Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP取无键名一维数组并集</title>
      <link href="/php-non-key-array-merge.html"/>
      <url>/php-non-key-array-merge.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>array_merge只能生成有键名的数组的并集，因此自己写了一个用于生成无键名数组并集的函数。</p></blockquote><pre><code class="php">&lt;?php    /*     * 函数：array_union($arg1,$arg2,...)     * 描述：取无键名一维数组并集     * 作者：Sora     * 博客：https://www.sorasky.in/    */    function array_union(){        $args = func_get_args();        $response = [];        foreach($args as $arg){            $res = array_flip($response);            $arg = array_flip($arg);            $response = array_merge($res,$arg);            $response = array_keys($response);        }        return $response;    }</code></pre>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 数组 </tag>
            
            <tag> 并集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zhixue-K α 开始运行</title>
      <link href="/zhixue-k-alpha.html"/>
      <url>/zhixue-k-alpha.html</url>
      
        <content type="html"><![CDATA[<p>高一的时候尝试把智学网的任意查询成绩接口搬到网页上，结果失败了……<br><del>嘛反正现在成功了也无所谓（</del></p><p>##1. @(zhixue_k) Zhixue-K是什么？</p><blockquote><p>Zhixue-K是本人开发的智学网的第三方数据站，提供同校任意同学成绩查询的功能；<br>##2.Zhixue-K如今能提供什么服务？</p></blockquote><ul><li>1.查询同学的单科成绩和单人单次考试的全科成绩；</li><li>2.答题卡查看、阅卷教师查看。<br>##3.已知Bug</li><li>1.站点安全性、异常处理仍未完善，希望使用的同学不要恶意操作，小服务器受不起；</li><li>2.暂时只能显示最近10次考试；</li><li>3.我这届还没实行新高考，如果显示的结果不适应新高考，希望能酷安私信提供建议；</li><li>4.等待发现……<br>##4.如何使用？<blockquote><p>查询单科成绩功能处于公测阶段，直接登录即可使用。<br>##5.为什么不能查自己成绩的排名、得分率？<br>本着不重复造轮子的原则，本项目仅提供查询同年段成绩的服务。如果需要查自己的成绩，建议使用智学Lite<del>或zhixue.pro</del>zhixue.pro炸了诶<br><a href="https://github.com/Git-WeStudio/Zxlite">智学Lite</a><del><a href="http://www.zhixue.pro/">zhixue.pro</a></del><br>##6.网址是什么？<br><a href="http://service.sorasky.in/Zhixue">http://service.sorasky.in/Zhixue</a></p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zhixue-K </tag>
            
            <tag> 智学网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>inSoraSky 博客 Telegram 交流群</title>
      <link href="/tg-group-1.html"/>
      <url>/tg-group-1.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>看着自己创建的kaiOS交流群鱼龙混杂，我也挺慌啊……<br>毕竟这是我第一个超过100人的群……</p></blockquote><hr><p>inSoraSky博客Telegram交流群： <a href="http://t.me/sorasky">http://t.me/sorasky</a><br>本群主要内容是技术交流，请不要在本群讨论涉政话题。<br>都能上Telegram了，那么多政治群给你撕，你偏要来祸害我这小地方？</p>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Telegram </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP 6.0 启用Session</title>
      <link href="/tp6session.html"/>
      <url>/tp6session.html</url>
      
        <content type="html"><![CDATA[<p>##1.启用Session中间件<br>项目目录/app/middleware.php，将<code>\think\middleware\SessionInit::class</code>一行取消注释；<br>##2.配置Session<br>项目目录/config/session.php：</p><pre><code class="php">&lt;?php// +----------------------------------------------------------------------// | 会话设置// +----------------------------------------------------------------------return [    // session name    'name'           =&gt; 'PHPSESSID',    // SESSION_ID的提交变量,解决flash上传跨域    'var_session_id' =&gt; '',    // 驱动方式 支持file cache    'type'           =&gt; 'file',    // 存储连接标识 当type使用cache的时候有效    'store'          =&gt; null,    // 过期时间    'expire'         =&gt; 1440,    // 前缀    'prefix'         =&gt; 'php_',];</code></pre><p>name：Session名称<br>expire：Session有效时间，以秒为单位<br>prefix：Session前缀，用以区分同域名不同应用</p>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> ThinkPHP </tag>
            
            <tag> Session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lineage 17/安卓10 玩机必刷包（Magisk20+EdXposed4.5.7）</title>
      <link href="/android10flash.html"/>
      <url>/android10flash.html</url>
      
        <content type="html"><![CDATA[<p>学Android开发中，觉得频繁<del>插♂拔♂</del>容易损伤我心爱的米10pro的龙体 @(huaji_han) 于是闲鱼28块淘了个红米2刷了安卓10（说实话这东西能刷安卓10我是真没想到 @(huaji_han) ）<br>这里分享Magisk20和EdXposed4.5.7的安装包，方便那些不便科学上网去GitHub的童鞋</p><ul><li>Magisk 20（包含Magisk Manager）<br><a href="https://www.lanzoux.com/i23drf1dofi">https://www.lanzoux.com/i23drf1dofi</a></li><li>Riru（EdXposed依赖，需要先刷）<br><a href="https://www.lanzoux.com/imz9Of1do5i">https://www.lanzoux.com/imz9Of1do5i</a></li><li>EdXposed 4.5.7 YAHFA（若需SandHook版请自行至GitHub下载）<br><a href="https://www.lanzoux.com/ime9Bf1do7a">https://www.lanzoux.com/ime9Bf1do7a</a></li><li>EdXposed Manager（需自行安装）<br><a href="https://www.lanzoux.com/iELDPf1do2f">https://www.lanzoux.com/iELDPf1do2f</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签 </tag>
            
            <tag> Android </tag>
            
            <tag> Android 10 </tag>
            
            <tag> Lineage </tag>
            
            <tag> Lineage 17 </tag>
            
            <tag> Magisk 20 </tag>
            
            <tag> EdXposed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL修改数据类型出错“check the manual that corresponds to your MySQL server version for the right syntax to use near ……”解决办法</title>
      <link href="/data-type-error-mysql.html"/>
      <url>/data-type-error-mysql.html</url>
      
        <content type="html"><![CDATA[<p>今天把MySQL的数据类型从int改为timestamp的时候遇到了以下错误：<br><code>#1064 - You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '(11) NOT NULL' at line 1</code><br>网上教程都是说我在名称里使用了保留字，可是我翻来覆去看了半天——不可能有保留字啊！<br>直到我看到了11。。。<br><img src="/images/881429905.png"><br>timestamp不应该有长度的啊！<br>把长度11删掉即解决。</p>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>inSoraSky 长网址API——全网首家提供拉长网址的API</title>
      <link href="/lengthenurl.html"/>
      <url>/lengthenurl.html</url>
      
        <content type="html"><![CDATA[<p>看腻了百度上铺天盖地的短网址服务，你是否开始回忆起长网址的好处？<br>快来看看，inSoraSky LengthenURL API——全网首家提供拉长网址的API！<br>让你不用写几行代码，就可以享受超大HTML文件带来的快感；<br>让你摒弃短网址的传统，开启长网址的新潮流；<br>让你在众多短网址里以超过100字符的长度脱颖而出！<del>其实就是我闲得慌的产物</del><br>使用方法：<code>http://service.sorasky.in/LengthenUrl/generate/?url=目标网址</code>（目标网址建议使用UrlEncode编码；使用https的请自行替换协议前缀）<br>返回：生成的长网址，直接访问即可</p>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
            <tag> inSoraSky </tag>
            
            <tag> 长网址 </tag>
            
            <tag> 短网址 </tag>
            
            <tag> 全网首个 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP Base16/Base32编码解码</title>
      <link href="/base16-32-php.html"/>
      <url>/base16-32-php.html</url>
      
        <content type="html"><![CDATA[<pre><code class="php">function base32_encode($input) {    $BASE32_ALPHABET = 'abcdefghijklmnopqrstuvwxyz234567';    $output = '';    $v = 0;    $vbits = 0;    for ($i = 0, $j = strlen($input); $i &lt; $j; $i++) {        $v &lt;&lt;= 8;        $v += ord($input[$i]);        $vbits += 8;        while ($vbits &gt;= 5) {            $vbits -= 5;            $output .= $BASE32_ALPHABET[$v &gt;&gt; $vbits];            $v &amp;= ((1 &lt;&lt; $vbits) - 1);        }    }    if ($vbits &gt; 0) {        $v &lt;&lt;= (5 - $vbits);        $output .= $BASE32_ALPHABET[$v];    }    return $output;}function base32_decode($input) {    $output = '';    $v = 0;    $vbits = 0;    for ($i = 0, $j = strlen($input); $i &lt; $j; $i++) {        $v &lt;&lt;= 5;        if ($input[$i] &gt;= 'a' &amp;&amp; $input[$i] &lt;= 'z') {            $v += (ord($input[$i]) - 97);        } elseif ($input[$i] &gt;= '2' &amp;&amp; $input[$i] &lt;= '7') {            $v += (24 + $input[$i]);        } else {            exit(1);        }        $vbits += 5;        while ($vbits &gt;= 8) {            $vbits -= 8;            $output .= chr($v &gt;&gt; $vbits);            $v &amp;= ((1 &lt;&lt; $vbits) - 1);        }    }    return $output;}    function base16_encode($data){    $result = "";    $BASE_16_CHARS = array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F");    for ($i = 0; $i &lt; strlen($data); $i++) {        $result .= $BASE_16_CHARS[(@ord($data[$i]) &amp; 0xf0) &gt;&gt; 4];        $result .= $BASE_16_CHARS[@ord($data[$i]) &amp; 0x0f];    }    return $result;}function base16_decode($data){    $result = "";    $len = strlen($data) / 2;    for ($i = 0; $i &lt; $len; $i++) {        $result .= chr(intval(substr($data, $i * 2, 2), 16));    }    return $result;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Base16 </tag>
            
            <tag> Base32 </tag>
            
            <tag> 编码解码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前清水博客kaiOS文章Word/Github存档</title>
      <link href="/heppywang-word.html"/>
      <url>/heppywang-word.html</url>
      
        <content type="html"><![CDATA[<p>由于各种原因，清水博客停止运营，原文已经以Word文档以及markdown文档形式保存下来。<br>不建议从Word中直接复制命令，而应该先将命令从Word复制到记事本，再从记事本复制到命令行中。<br>Word下载地址：<a href="https://miit.lanzous.com/iSKzdelo1je">https://miit.lanzous.com/iSKzdelo1je</a><br>GitHub访问地址：<a href="https://github.com/insorasky/old_heppy_wang">https://github.com/insorasky/old_heppy_wang</a></p>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 清水博客 </tag>
            
            <tag> heppy.wang </tag>
            
            <tag> 存档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>inSoraSky 随机百合图片API</title>
      <link href="/randyuripic.html"/>
      <url>/randyuripic.html</url>
      
        <content type="html"><![CDATA[<p>建博客的话，如果文章没有头图，不是显得很无聊？<br>如果默认头图只有一张，不是显得更无聊？<br>于是我到百度上找随机图API，然而并没有找到我心仪的API——网上那些要么穿着暴露要么画风很那啥，这样的媚宅图片果然还是不太适合我ww，于是自己写了一个，计划这几天逐步扩大图片库。本博客已经在使用本API。</p><p>项目主页：<a href="http://service.sorasky.in/RandPic/">http://service.sorasky.in/RandPic/</a><br>使用方法：<br>1.直接重定向至图片：<code>http://service.sorasky.in/RandPic/pic</code> （如果使用https请自行替换协议前缀）<br>2.以json的形式返回图片地址、作者名称、原地址：<code>http://service.sorasky.in/RandPic/json</code> （如果使用https请自行替换协议前缀）</p>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
            <tag> 百合 </tag>
            
            <tag> 随机图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP 6.0 使用数据库Db类时报告 “Class &#39;app\controller\Db&#39; not found” 错误</title>
      <link href="/tp6-db-not-found.html"/>
      <url>/tp6-db-not-found.html</url>
      
        <content type="html"><![CDATA[<p>今天发现ThinkPHP出6.0了，马上composer一套练练手。<br>然而我发现数据库调用时总是出现<code>Class 'app\controller\Db' not found</code>错误。<br>经过多方查找，我的解决方法：在文件头处添加以下代码：<br><code>use think\facade\Db;</code><br>即可解决问题。</p>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> ThinkPHP </tag>
            
            <tag> 网络开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deepin下安装Anthy日语输入法</title>
      <link href="/deepin-jaime.html"/>
      <url>/deepin-jaime.html</url>
      
        <content type="html"><![CDATA[<p>刚买的电脑，觉得Deepin好看就安装了Deepin，不过Linux毕竟是Linux，桌面的功能肯定是没有Windows完善，搜狗输入法能直接用deb软件包安装也是在中国政府支持国产操作系统的前提下，像日语输入法这种Win10下可以一键安装的到了Linux下就要用命令，Deepin自带的设置里也没有相关的选项……</p><p>Deepin自带的输入法管理器是Fcitx，百度了一大圈，用 <code>sudo apt-get install fcitx-rime</code> 和 <code>sudo apt-get install fcitx-anthy</code> 装了半天没有反应，绝望地改语言为日语然后注销重启之后发现这两个输入法出现在了列表里。。。原谅我见识少，居然需要先注销。。。</p><p>话说到底是谁告诉我Rime是日语输入法的。。。明明是台湾繁体。。。果断卸载</p><p>安装方法：<br>1、启动终端；<br>2、运行命令： <code>sudo apt-get install fcitx-anthy</code> ，输入密码<br>3、注销用户，重新登录<br>4、输入法菜单里找到Anthy启用</p><p>话说为什么日文输入法会用麒麟的皮肤。。。分からないな〜<br><img src="/images/2398921536.png"></p><p>更新：这似乎是Fcitx的皮肤，找个Fcitx皮肤换了就好</p><p>Fcitx-Anthy GitHub主页：<a href="http://github.com/fcitx/fcitx-anthy/">http://github.com/fcitx/fcitx-anthy/</a></p>]]></content>
      
      
      <categories>
          
          <category> 纯属折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deepin </tag>
            
            <tag> Anthy </tag>
            
            <tag> Linux </tag>
            
            <tag> 日语输入法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
